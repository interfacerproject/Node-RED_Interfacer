[{"id":"a9cf961a3a52160c","type":"tab","label":"Isolation Gowns","disabled":false,"info":"","env":[]},{"id":"29dcfb15ba1e5f55","type":"tab","label":"Notebook API","disabled":false,"info":"","env":[]},{"id":"f781100da59ddc5d","type":"subflow","name":"Sign Subflow","info":"","category":"","in":[{"x":80,"y":120,"wires":[{"id":"612e6762f465c1e6"}]}],"out":[{"x":640,"y":120,"wires":[{"id":"bc59db00aa1fe6b1","port":0}]}],"env":[],"meta":{},"color":"#DDAA99"},{"id":"ebefa267a172bbc0","type":"subflow","name":"PrcReq","info":"","category":"","in":[{"x":300,"y":140,"wires":[{"id":"80730bb5b774703a"}]}],"out":[{"x":820,"y":140,"wires":[{"id":"ac6ffde5235b8d15","port":0}]},{"x":820,"y":200,"wires":[{"id":"80730bb5b774703a","port":0}]}],"env":[],"meta":{},"color":"#DDAA99"},{"id":"a1f23e7f9e7ee37e","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":false},"page-titlebar-backgroundColor":{"value":"#0094CE","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#ffffff","edited":false},"group-textColor":{"value":"#1bbfff","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#0094ce","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false},"base-font":{"value":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"}},"angularTheme":{"primary":"indigo","accents":"blue","warn":"red","background":"grey","palette":"light"}},"site":{"name":"Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","lockMenu":"false","allowTempTheme":"true","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"612e6762f465c1e6","type":"function","z":"f781100da59ddc5d","name":"Generate Signature","func":"const zenroom = global.get(\"zenroom\");\n\nconst sign_script = `\nScenario eddsa: sign a graph query\nGiven I have a 'base64' named 'gql'\nGiven I have a 'keyring'\n\nWhen I create the eddsa signature of 'gql'\nAnd I create the hash of 'gql'\n\nThen print 'eddsa signature' as 'base64'\nThen print 'gql' as 'base64'\nThen print 'hash' as 'hex'\n`;\n\n// Create the JSON body to be sent to the back-end\nconst body = JSON.stringify({\n    query: msg.sign.query,\n    variables: msg.variables\n});\n\n\nmsg.sign.body = body;\n\nconst zenKeys = JSON.stringify({keyring: {eddsa: msg.sign.eddsa}});\n\nmsg.sign.zenKeys = zenKeys;\n\n// Encode the JSON body as base64\nconst zenData = JSON.stringify({gql: Buffer.from(body, 'utf8').toString('base64')})\n\nmsg.sign.zenData = zenData;\n\nlet res = await zenroom.zencode_exec(sign_script, { data: msg.sign.zenData, keys: msg.sign.zenKeys})\n            .then((result) => {\n                console.log(\"Msg : \", result.result);\n                const res = JSON.parse(result.result);\n                console.log(\"Msg signature: \", res);\n                return res;\n            }).catch((error) => {\n                console.error(\"Error in zenroom sign function: \", error);\n                return error;\n\n            });\n\nmsg.sign.signature = res;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":240,"y":120,"wires":[["bc59db00aa1fe6b1"]]},{"id":"bc59db00aa1fe6b1","type":"function","z":"f781100da59ddc5d","name":"Prepare request","func":"// Reset the headears\nmsg.headers = {};\nmsg.headers['content-type'] = 'application/json';\n\nmsg.headers['zenflows-sign'] = msg.sign.signature.eddsa_signature;\nmsg.headers['zenflows-user'] = msg.sign.username;\nmsg.headers['zenflows-hash'] = msg.sign.signature.hash;\n\nmsg.url = msg.payload.endpoint;\nmsg.method = 'POST';\n\n\n// This is going to destroy the msg.payload!!!\n// msg.payload = msg.sign.body;\nmsg.payload = msg.sign.body;\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":450,"y":120,"wires":[[]]},{"id":"80730bb5b774703a","type":"http request","z":"ebefa267a172bbc0","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[{"keyType":"other","keyValue":"content-type","valueType":"other","valueValue":"application/json"}],"x":450,"y":140,"wires":[["ac6ffde5235b8d15"]]},{"id":"ac6ffde5235b8d15","type":"function","z":"ebefa267a172bbc0","name":"CopyResults","func":"\nconst user_ret = msg.payload.result.user || {};\nconst user_data_ret = msg.payload.result[\"user_data\"] || {};\nconst users_data_ret = msg.payload.result[\"users_data\"] || {};\nconst locs_data_ret = msg.payload.result[\"locs_data\"] || {};\nconst units_data_ret = msg.payload.result[\"units_data\"] || {};\nconst res_spec_data_ret = msg.payload.result[\"res_spec_data\"] || {};\nconst res_data_ret = msg.payload.result[\"res_data\"] || {};\nconst process_data_ret = msg.payload.result[\"process_data\"] || {};\nconst action_ret = msg.payload.result[\"action\"] || undefined;\n\nvar updates = 0;\n\nif ((Object.keys(user_data_ret).length !== 0) && (Object.keys(users_data_ret).length !== 0)) {\n    throw \"user_data and users_data returned\";\n}\nif (Object.keys(locs_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"locs_data is returned but no user is given\";\n    } else {\n        var locs_data = flow.get(\"locs_data\");\n        locs_data[user_ret] = locs_data_ret[user_ret];\n        flow.set(\"locs_data\", locs_data);\n        updates += 1;\n        node.log(\"locs_data updated\");\n    }\n}\n\nif (Object.keys(units_data_ret).length !== 0) {\n    const unit_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (unit_name_ret == undefined) {\n        throw \"units_data is returned but no unit name is given\";\n    } else {\n        var units_data = flow.get(\"units_data\");\n        units_data[unit_name_ret] = units_data_ret[unit_name_ret];\n        flow.set(\"units_data\", units_data);\n        updates += 1;\n        node.log(\"units_data updated\");\n    }\n}\nif (Object.keys(res_spec_data_ret).length !== 0) {\n    const res_spec_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (res_spec_name_ret == undefined) {\n        throw \"res_spec_data is returned but no res spec name is given\";\n    } else {\n        var res_spec_data = flow.get(\"res_spec_data\");\n        res_spec_data[res_spec_name_ret] = res_spec_data_ret[res_spec_name_ret];\n        flow.set(\"res_spec_data\", res_spec_data);\n        updates += 1;\n        node.log(\"res_spec_data updated\");\n    }\n}\nif (Object.keys(res_data_ret).length !== 0) {\n    const res_name_ret = msg.payload.result[\"res_name\"] || undefined;\n    const event_seq_ret = msg.payload.result[\"event_seq\"] || undefined;\n    if (event_seq_ret == undefined || event_seq_ret.length != 1) {\n        throw \"No or more than one event returned\" + event_seq_ret;\n    }\n\n    if (res_name_ret == undefined) {\n        throw \"res_data is returned but no res name is given\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    event_seq.push(event_seq_ret[0]);\n    flow.set(\"event_seq\", event_seq);\n\n    var res_data = flow.get(\"res_data\");\n    res_data[res_name_ret] = res_data_ret[res_name_ret];\n    flow.set(\"res_data\", res_data);\n    updates += 1;\n    node.log(\"res_data updated\");\n}\nif (Object.keys(process_data_ret).length !== 0) {\n    const process_name_ret = msg.payload.result[\"process_name\"] || undefined;\n    if (process_name_ret == undefined) {\n        throw \"process_data is returned but no process name is given\";\n    }\n    var process_data = flow.get(\"process_data\");\n    process_data[process_name_ret] = process_data_ret[process_name_ret];\n    flow.set(\"process_data\", process_data);\n    updates += 1;\n    node.log(\"process_data updated\");\n}\nif (Object.keys(user_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"user_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = user_data_ret;\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (Object.keys(users_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"users_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = users_data_ret[user_ret];\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (action_ret != undefined) {\n    const existing_res_ret = msg.payload.result[\"existing_res\"] || {};\n    const new_res_ret = msg.payload.result[\"new_res\"] || {};\n\n    if (Object.keys(existing_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[existing_res_ret['name']] = existing_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"existing res_data in event updated\");\n    }\n    if (Object.keys(new_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[new_res_ret['name']] = new_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"new res_data in event updated\");\n    }\n\n    const rec_event_ret = msg.payload.result[\"rec_event\"] || undefined;\n    if (rec_event_ret == undefined) {\n        throw \"action provided but no event recorded\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    if (!'action' in rec_event_ret){\n        throw \"No action recorded in event\";\n    }\n    var event = {};\n    for (let key of Object.keys(rec_event_ret['action'])){\n        event[key] = rec_event_ret['action'][key];\n    }\n    event_seq.push(event);\n    if ('process' in rec_event_ret){\n        var event = {};\n        for (let key of Object.keys(rec_event_ret['process'])){\n            event[key] = rec_event_ret['process'][key];\n        }\n        event_seq.push(event);\n    }\n    flow.set(\"event_seq\", event_seq);\n    node.log(\"event added\");\n    updates += 1;\n}\n\nif (updates != 1) {\n    throw \"Incorrect number of updates performed: \" + updates;\n}\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":630,"y":140,"wires":[[]]},{"id":"b582df30a9d2445c","type":"debug","z":"a9cf961a3a52160c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":630,"y":900,"wires":[]},{"id":"d77006acee54af34","type":"http in","z":"a9cf961a3a52160c","name":"Form","url":"/interfacer/getHMAC","method":"post","upload":false,"swaggerDoc":"","x":90,"y":80,"wires":[["01f2e8dd1ac14440"]]},{"id":"01f2e8dd1ac14440","type":"function","z":"a9cf961a3a52160c","name":"Get HMAC","func":"\n\nmsg.headers = {};\nmsg.headers['content-type'] = 'application/json';\n\nmsg.url = msg.payload.endpoint;\nmsg.method = 'POST';\n\nconst variables = {\n    \"firstRegistration\": true,\n    \"userData\": \"{\\\"email\\\": \\\"\" + msg.payload.email + \"\\\"}\"\n};\n\n// To get this in the debug output\nmsg.variables = variables\n\n// This is going to destroy the msg.payload!!!\nmsg.payload = JSON.stringify({\n  query: `mutation ($firstRegistration: Boolean!, $userData: String!){\n  \n    keypairoomServer(firstRegistration: $firstRegistration, userData: $userData)\n      \n  }`,\n  variables: variables\n})\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":250,"y":80,"wires":[["ced9f63df845af74","beadd72e20548fee"]]},{"id":"ced9f63df845af74","type":"http request","z":"a9cf961a3a52160c","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":450,"y":80,"wires":[["beadd72e20548fee","bbeba4dd2bc281e6"]]},{"id":"6b9a303ec68aaf47","type":"function","z":"a9cf961a3a52160c","name":"Data to sign","func":"// Call specific data\nconst label = msg.payload.label;\nconst symbol = msg.payload.symbol;\n\n// Produce the query and variables vars to be signed\nconst variables = {\"unit\": {\n                        \"label\": label,\n                        \"symbol\": symbol\n                        }\n            };\n\n\nconst query = `mutation($unit:UnitCreateParams!) {\n            createUnit(unit: $unit) {\n                unit {\n                    id\n                }\n            }\n          }`;\n\n// Store the variables for later processing\nmsg.variables = variables\n          \n// Define data for signature\nconst eddsa = msg.payload.eddsa;\nconst username = msg.payload.username;\n\nmsg.sign = {};\n\nmsg.sign.query = query;\nmsg.sign.eddsa = eddsa;\nmsg.sign.username = username;\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":250,"y":520,"wires":[["cafeb261165160b1","9a42dde3957dd0ad"]]},{"id":"41a31f091965c362","type":"http request","z":"a9cf961a3a52160c","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":630,"y":520,"wires":[["9a42dde3957dd0ad","7e3394bb6ca1da06"]]},{"id":"e7f96084acdd0aa2","type":"function","z":"a9cf961a3a52160c","name":"Data to sign","func":"// Call specific data\nconst name = msg.payload.process_name;\nconst note = msg.payload.process_note;\n\n// Produce the query and variables vars to be signed\nconst ts = new Date(Date.now());\n\nconst variables = {\n      \"process\": {\n        \"name\": name,\n        \"note\": note,\n        \"hasBeginning\": ts,\n        \"hasEnd\": ts\n      }\n  };\n\nconst query = `mutation($process:ProcessCreateParams!) {\n\t  createProcess(process: $process) {\n\t\tprocess {\n\t\t  id\n\t\t}\n\t  }\n\t}`;\n\t\n\n// Store the variables for later processing\nmsg.variables = variables\n          \n// Define data for signature\nconst eddsa = msg.payload.eddsa;\nconst username = msg.payload.username;\n\nmsg.sign = {};\n\nmsg.sign.query = query;\nmsg.sign.eddsa = eddsa;\nmsg.sign.username = username;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":270,"y":980,"wires":[["b1dddf12ee1a9e24","6905f51ee38526b3"]]},{"id":"6196df0943914213","type":"http response","z":"a9cf961a3a52160c","name":"","statusCode":"","headers":{},"x":850,"y":80,"wires":[]},{"id":"bbeba4dd2bc281e6","type":"function","z":"a9cf961a3a52160c","name":"Format Reply","func":"// Read the payload\nvar seed = msg.payload.data.keypairoomServer;\n\n// Provide an answer\nmsg.payload = {};\nmsg.payload.seed = seed;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":640,"y":80,"wires":[["6196df0943914213"]]},{"id":"cf3e88999b724618","type":"comment","z":"a9cf961a3a52160c","name":"Get server seed","info":"","x":120,"y":40,"wires":[]},{"id":"9927f0b45d15344b","type":"http in","z":"a9cf961a3a52160c","name":"createUnit","url":"/interfacer/createUnit","method":"post","upload":false,"swaggerDoc":"","x":100,"y":520,"wires":[["6b9a303ec68aaf47"]]},{"id":"7e3394bb6ca1da06","type":"function","z":"a9cf961a3a52160c","name":"Format Reply","func":"// Read the payload\nconst unit = msg.payload.data.createUnit.unit.id;\n\nmsg.payload = {};\nmsg.payload.unit = unit;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":820,"y":520,"wires":[["71f92c67ca67af48"]]},{"id":"71f92c67ca67af48","type":"http response","z":"a9cf961a3a52160c","name":"","statusCode":"","headers":{},"x":990,"y":520,"wires":[]},{"id":"72c05c5c0bd10d12","type":"http response","z":"a9cf961a3a52160c","name":"","statusCode":"","headers":{},"x":990,"y":840,"wires":[]},{"id":"04c370bd35360547","type":"function","z":"a9cf961a3a52160c","name":"Format Reply","func":"const eventId = msg.payload.data.createEconomicEvent.economicEvent.id;\nconst resourceId = msg.payload.data.createEconomicEvent.economicEvent.resourceInventoriedAs.id;\n\n\nmsg.payload = {};\nmsg.payload.eventId = eventId;\nmsg.payload.resourceId = resourceId;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":820,"y":840,"wires":[["72c05c5c0bd10d12"]]},{"id":"75ad1ae27b0775fb","type":"http request","z":"a9cf961a3a52160c","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":650,"y":840,"wires":[["b582df30a9d2445c","04c370bd35360547"]]},{"id":"62fcaf5db019d842","type":"function","z":"a9cf961a3a52160c","name":"Data to sign","func":"// Call specific data\nconst agent_id = msg.payload.agent_id;\nconst resource_id = msg.payload.resource_id;\nconst resource_name = msg.payload.resource_name;\nconst unit_id = msg.payload.unit_id;\nconst amount = msg.payload.amount;\nconst classification = msg.payload.classification;\n\n// Produce the query and variables vars to be signed\nconst ts = new Date(Date.now());\n\nconst variables = {\n        \"event\": {\n            \"note\": \"update event\",\n            \"action\": \"raise\",\n            \"provider\": agent_id, \n            \"receiver\": agent_id,\n            \"hasPointInTime\" : ts,\n            \"resourceQuantity\": {\n              \"hasUnit\": unit_id, \n              \"hasNumericalValue\": amount \n            },\n            \"resourceConformsTo\": classification\n        },\n        \"newInventoriedResource\": { \n            \"name\": resource_name,\n            \"trackingIdentifier\": resource_id\n        }\n};\n\nconst query = `mutation($event:EconomicEventCreateParams!, $newInventoriedResource:EconomicResourceCreateParams) {\n                createEconomicEvent(event:$event, newInventoriedResource:$newInventoriedResource) {\n                    economicEvent {\n                        id\n                        provider {\n                            id\n                            name\n                            note\n                        }\n                        resourceQuantity {\n                            hasNumericalValue\n                            hasUnit {\n                                label\n                                symbol\n                            }\n                        }\n                        resourceInventoriedAs {\n                            id\n                            trackingIdentifier  \n                      }\n                    }\n                }\n            }`;\n\n// Store the variables for later processing\nmsg.variables = variables\n          \n// Define data for signature\nconst eddsa = msg.payload.eddsa;\nconst username = msg.payload.username;\n\nmsg.sign = {};\n\nmsg.sign.query = query;\nmsg.sign.eddsa = eddsa;\nmsg.sign.username = username;\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":310,"y":840,"wires":[["b582df30a9d2445c","d4a01c7ff1aa60f2"]]},{"id":"13197e6bea34f939","type":"http in","z":"a9cf961a3a52160c","name":"createResource","url":"/interfacer/createResource","method":"post","upload":false,"swaggerDoc":"","x":120,"y":840,"wires":[["62fcaf5db019d842"]]},{"id":"ec61e56c21eb3e9f","type":"function","z":"a9cf961a3a52160c","name":"Format Reply","func":"const processId = msg.payload.data.createProcess.process.id;\n\n\nmsg.payload = {};\nmsg.payload.processId = processId;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":820,"y":980,"wires":[["c3e3e6232d39d1b6"]]},{"id":"cf36936a5c75bfd6","type":"http request","z":"a9cf961a3a52160c","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":630,"y":980,"wires":[["6905f51ee38526b3","ec61e56c21eb3e9f"]]},{"id":"c3e3e6232d39d1b6","type":"http response","z":"a9cf961a3a52160c","name":"","statusCode":"","headers":{},"x":990,"y":980,"wires":[]},{"id":"6905f51ee38526b3","type":"debug","z":"a9cf961a3a52160c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":610,"y":1040,"wires":[]},{"id":"b82c72a08c1a9fde","type":"http in","z":"a9cf961a3a52160c","name":"createProcess","url":"/interfacer/createProcess","method":"post","upload":false,"swaggerDoc":"","x":110,"y":980,"wires":[["e7f96084acdd0aa2"]]},{"id":"71e1a605b5ded04e","type":"http response","z":"a9cf961a3a52160c","name":"","statusCode":"","headers":{},"x":990,"y":1400,"wires":[]},{"id":"ec313c7bf8cd91cf","type":"function","z":"a9cf961a3a52160c","name":"Format Reply","func":"const eventId = msg.payload.data.createEconomicEvent.economicEvent.id;\n\nconst transferredId = msg.payload.data.createEconomicEvent.economicEvent.toResourceInventoriedAs.id;\n\n\nmsg.payload = {};\nmsg.payload.eventId = eventId;\nmsg.payload.transferredId = transferredId;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":820,"y":1400,"wires":[["71e1a605b5ded04e"]]},{"id":"1f51d816c9254a8e","type":"http request","z":"a9cf961a3a52160c","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":630,"y":1400,"wires":[["78bbd41a6c118d6b","ec313c7bf8cd91cf"]]},{"id":"78bbd41a6c118d6b","type":"debug","z":"a9cf961a3a52160c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":610,"y":1460,"wires":[]},{"id":"26c12da433641d7d","type":"http in","z":"a9cf961a3a52160c","name":"createTransfer","url":"/interfacer/createTransfer","method":"post","upload":false,"swaggerDoc":"","x":110,"y":1400,"wires":[["e6a4ec239be873e1"]]},{"id":"e6a4ec239be873e1","type":"function","z":"a9cf961a3a52160c","name":"Data to sign","func":"// Call specific data\nconst note = msg.payload.note;\nconst provider_id = msg.payload.provider_id;\nconst receiver_id = msg.payload.receiver_id;\nconst resource_id = msg.payload.resource_id;\nconst resource_name = msg.payload.resource_name;\nconst unit_id = msg.payload.unit_id;\nconst amount = msg.payload.amount;\nconst location_id = msg.payload.location_id;\n\n// Produce the query and variables vars to be signed\nconst ts = new Date(Date.now());\nconst variables = {\n        \"event\": {\n            \"note\": note,\n            \"action\": \"transfer-custody\",\n            \"provider\": provider_id, \n            \"receiver\": receiver_id, \n            \"resourceInventoriedAs\": resource_id,\n            \"hasPointInTime\": ts,\n            \"atLocation\": location_id,\n            \"resourceQuantity\": {\n              \"hasUnit\": unit_id, \n              \"hasNumericalValue\": amount \n            }\n        },\n        \"newInventoriedResource\": {\n            \"name\" : resource_name\n        }\n    };\n    \nconst query = `mutation($event:EconomicEventCreateParams!, $newInventoriedResource: EconomicResourceCreateParams) {\n                createEconomicEvent(event:$event, newInventoriedResource:$newInventoriedResource) {\n                    economicEvent {\n                        id\n                        provider {\n                            id\n                            name\n                            note\n                        }\n                        resourceQuantity {\n                            hasNumericalValue\n                            hasUnit {\n                                label\n                                symbol\n                            }\n                        }\n                        toResourceInventoriedAs { \n                            id\n                            name\n                            onhandQuantity {\n                                hasNumericalValue\n                                hasUnit {\n                                    label\n                                    symbol\n                                }\n                            }\n                            accountingQuantity {\n                                hasNumericalValue\n                                hasUnit {\n                                    label\n                                    symbol\n                                }\n                            }\n                            primaryAccountable {\n                            id\n                          }\n                        }\n                        resourceInventoriedAs {\n                            id\n                            name\n                            onhandQuantity {\n                                hasNumericalValue\n                                hasUnit {\n                                    label\n                                    symbol\n                                }\n                            }\n                            accountingQuantity {\n                                hasNumericalValue\n                                hasUnit {\n                                    label\n                                    symbol\n                                }\n                            }\n                            primaryAccountable {\n                            id\n                          }\n                        }\n                    }\n                }\n            }`;\n\n\n// Store the variables for later processing\nmsg.variables = variables\n          \n// Define data for signature\nconst eddsa = msg.payload.eddsa;\nconst username = msg.payload.username;\n\nmsg.sign = {};\n\nmsg.sign.query = query;\nmsg.sign.eddsa = eddsa;\nmsg.sign.username = username;\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":270,"y":1400,"wires":[["78bbd41a6c118d6b","0d1e2c183fa42697"]]},{"id":"fe5db33a07f08de1","type":"http response","z":"a9cf961a3a52160c","name":"","statusCode":"","headers":{},"x":990,"y":1160,"wires":[]},{"id":"d1f6e59d5ba1e759","type":"function","z":"a9cf961a3a52160c","name":"Format Reply","func":"const eventId = msg.payload.data.createEconomicEvent.economicEvent.id;\n\nvar resourceId = null;\n\nif ( msg.payload.data.createEconomicEvent.economicResource != null ){\n    resourceId = msg.payload.data.createEconomicEvent.economicResource.id;\n}else if ( msg.payload.data.createEconomicEvent.economicEvent.resourceInventoriedAs != null ){\n    resourceId = msg.payload.data.createEconomicEvent.economicEvent.resourceInventoriedAs.id;\n}else if (msg.payload.data.createEconomicEvent.economicEvent.toResourceInventoriedAs != null ){\n    resourceId = msg.payload.data.createEconomicEvent.economicEvent.toResourceInventoriedAs;\n}\n\nmsg.payload = {};\nmsg.payload.eventId = eventId;\n\nif (resourceId != null){\n    msg.payload.resourceId = resourceId;\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":820,"y":1160,"wires":[["fe5db33a07f08de1"]]},{"id":"9395b1d5f101d921","type":"http request","z":"a9cf961a3a52160c","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":630,"y":1160,"wires":[["d1f6e59d5ba1e759","2fdd738ccee21e9c"]]},{"id":"1239e8ccc0e65584","type":"function","z":"a9cf961a3a52160c","name":"Data to sign","func":"// Produce the query and variables vars to be signed\nvar variables = {\n        \"event\": {\n            \"note\": msg.payload.note,\n            \"action\": msg.payload.action\n        }\n};\n\nvariables.event.hasPointInTime = new Date(Date.now());\n\nif ( msg.payload.provider_id != undefined ){\n    variables.event.provider = msg.payload.provider_id;\n}\n\nif ( msg.payload.receiver_id != undefined ){\n    variables.event.receiver = msg.payload.receiver_id;\n}\n\nif ( msg.payload.processIn_id != undefined ){\n    variables.event.inputOf = msg.payload.processIn_id;\n}\n\nif ( msg.payload.processOut_id != undefined ){\n    variables.event.outputOf = msg.payload.processOut_id;\n}\n\nif ( msg.payload.unit_id != undefined && msg.payload.amount != undefined){\n    if ( msg.payload.action == 'work' ){\n        variables.event.effortQuantity = {};\n        variables.event.effortQuantity.hasUnit = msg.payload.unit_id;\n        variables.event.effortQuantity.hasNumericalValue = msg.payload.amount;\n    }else{\n        variables.event.resourceQuantity = {};\n        variables.event.resourceQuantity.hasUnit = msg.payload.unit_id;\n        variables.event.resourceQuantity.hasNumericalValue = msg.payload.amount;\n    }\n}\n\nif ( msg.payload.resource_id != undefined ){\n    variables.event.resourceInventoriedAs = msg.payload.resource_id;\n}\n\nif ( msg.payload.classification != undefined ){\n    variables.event.resourceConformsTo = msg.payload.classification;\n}\n\nif ( msg.payload.resource_name != undefined ){\n    variables.newInventoriedResource = {};\n    variables.newInventoriedResource.name = msg.payload.resource_name;\n}\n\nif ( msg.payload.resourcetrack_id != undefined ){\n    // we imply here that there is also a resource_name, otherwise bomb\n    variables.newInventoriedResource.trackingIdentifier = msg.payload.resourcetrack_id;\n}\n\nconst resource_quantity = `\n                            hasNumericalValue\n                            hasUnit {\n                                label\n                                symbol\n                            }\n\n`;\n\nconst resource_body = `\n                            id\n                            name\n                            onhandQuantity {` +\n                                resource_quantity +\n                            `}\n                            accountingQuantity {` +\n                                resource_quantity +\n                            `}\n                            primaryAccountable {\n                            id\n                          }\n`;\n\nconst response = `economicEvent {\n                        id\n                        provider {\n                            id\n                            name\n                            note\n                        }\n                        resourceQuantity {\n                            hasNumericalValue\n                            hasUnit {\n                                label\n                                symbol\n                            }\n                        }\n                        toResourceInventoriedAs {` +\n                            resource_body +\n                        `}\n                        resourceInventoriedAs {` +\n                            resource_body +\n                        `\n                        }\n                    }`;\n                    \nvar mutation = '';\n\nif (variables.newInventoriedResource != undefined){\n    mutation = `mutation($event:EconomicEventCreateParams!, $newInventoriedResource: EconomicResourceCreateParams) {\n                createEconomicEvent(event:$event, newInventoriedResource:$newInventoriedResource) {` +\n                    response +\n                `}\n            }`;\n}else{\n    mutation = `mutation($event:EconomicEventCreateParams!) {\n                createEconomicEvent(event:$event) {` +\n                    response +\n                `}\n            }`;\n}\n\nconst query = mutation;\n\n// Store the variables for later processing\nmsg.variables = variables\n          \n// Define data for signature\nconst eddsa = msg.payload.eddsa;\nconst username = msg.payload.username;\n\nmsg.sign = {};\n\nmsg.sign.query = query;\nmsg.sign.eddsa = eddsa;\nmsg.sign.username = username;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":270,"y":1160,"wires":[["148fb20edbee43b8","2fdd738ccee21e9c"]]},{"id":"1b77e1551252bd55","type":"http in","z":"a9cf961a3a52160c","name":"createEvent","url":"/interfacer/createEvent","method":"post","upload":false,"swaggerDoc":"","x":110,"y":1160,"wires":[["1239e8ccc0e65584"]]},{"id":"17b272e3686339f5","type":"http response","z":"a9cf961a3a52160c","name":"","statusCode":"","headers":{},"x":930,"y":1500,"wires":[]},{"id":"30c22066ef8321d8","type":"function","z":"a9cf961a3a52160c","name":"Format Reply","func":"const trace = msg.payload.data.economicResource.trace\nconst track = msg.payload.data.economicResource.track\n\n\nmsg.payload = {};\nmsg.payload.trace = trace;\nmsg.payload.track = track;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":700,"y":1500,"wires":[["17b272e3686339f5"]]},{"id":"9b5733fa43a0796d","type":"http request","z":"a9cf961a3a52160c","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":450,"y":1500,"wires":[["04a7b53f4308dcdd","30c22066ef8321d8"]]},{"id":"2db04210e5b35643","type":"function","z":"a9cf961a3a52160c","name":"Trace & Track","func":"// Reset the headears\nmsg.headers = {};\nmsg.headers['content-type'] = 'application/json';\nmsg.headers['authorization'] = \"Bearer \" + msg.payload.token;\n\n\nmsg.url = msg.payload.endpoint;\nmsg.method = 'POST';\n\nvar variables = {\n    \"id\": msg.payload.resource_id,\n    \"recurseLimit\": msg.payload.recursion,\n\n};\n\n// This is going to destroy the msg.payload!!!\nmsg.payload = JSON.stringify({\n  query:    `query($id:ID!, $recurseLimit:Int!) {\n                economicResource(id: $id) {\n                    trace(recurseLimit: $recurseLimit) {...trace}\n                    track(recurseLimit: $recurseLimit) {...track}\n                }\n\n            }\n\n            fragment unit on Unit {\n                id symbol label\n            }\n\n            fragment measure on Measure {\n                hasUnit {...unit}\n                hasNumericalValue\n            }\n\n            fragment spatialThing on SpatialThing {\n                id\n                name\n                mappableAddress\n                note\n                geom\n                lat alt long\n            }\n\n            fragment economicResource on EconomicResource {\n                id\n                resourceName: name\n                note\n                primaryAccountable {id name displayUsername}\n                onhandQuantity {...measure}\n                accountingQuantity {...measure}\n                currentLocation {...spatialThing}\n                trackingIdentifier\n            }\n\n            fragment economicEvent on EconomicEvent {\n                id\n                action {id}\n                provider {id name displayUsername}\n                receiver {id name displayUsername}\n                resourceQuantity {...measure}\n                resourceClassifiedAs\n                resourceInventoriedAs {...economicResource}\n                note\n            }\n\n            fragment process on Process {\n                id\n                processName: name\n                note\n                inputs {...economicEvent}\n                outputs {...economicEvent}\n            }\n\n            fragment track on ProductionFlowItem {\n                ... on EconomicResource {__typename ...economicResource}\n                ... on EconomicEvent {__typename ...economicEvent}\n                ... on Process {__typename ...process}\n            }\n\n            fragment trace on ProductionFlowItem {\n                ... on EconomicResource {__typename ...economicResource}\n                ... on EconomicEvent {__typename ...economicEvent}\n                ... on Process {__typename ...process}\n}`,\n    variables: variables\n})\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":280,"y":1500,"wires":[["9b5733fa43a0796d","04a7b53f4308dcdd"]]},{"id":"04a7b53f4308dcdd","type":"debug","z":"a9cf961a3a52160c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":610,"y":1560,"wires":[]},{"id":"dc031adaa1b0f61b","type":"http in","z":"a9cf961a3a52160c","name":"traceTrack","url":"/interfacer/traceTrack","method":"post","upload":false,"swaggerDoc":"","x":100,"y":1500,"wires":[["2db04210e5b35643"]]},{"id":"5ecbcce4000d69b9","type":"comment","z":"a9cf961a3a52160c","name":"Create units of measurements for resources","info":"","x":210,"y":480,"wires":[]},{"id":"c3577fc8fe24f2f3","type":"comment","z":"a9cf961a3a52160c","name":"Create resources","info":"","x":120,"y":800,"wires":[]},{"id":"bd48eea69ad3c686","type":"comment","z":"a9cf961a3a52160c","name":"Create process to encapsulate events","info":"","x":190,"y":940,"wires":[]},{"id":"ca0a726a4281a41b","type":"comment","z":"a9cf961a3a52160c","name":"Create event Transfer-custody","info":"","x":160,"y":1360,"wires":[]},{"id":"12a3dd4123e21dbd","type":"comment","z":"a9cf961a3a52160c","name":"Create events with other actions","info":"","x":170,"y":1120,"wires":[]},{"id":"21e3ef708e289378","type":"debug","z":"a9cf961a3a52160c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":610,"y":780,"wires":[]},{"id":"383d01758c0eab1c","type":"http request","z":"a9cf961a3a52160c","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":650,"y":720,"wires":[["21e3ef708e289378","dea2dc586e075728"]]},{"id":"a9dec105802ab695","type":"function","z":"a9cf961a3a52160c","name":"Data to sign","func":"// Call specific data\nconst unit_id = msg.payload.unit_id;\nconst name = msg.payload.name;\nconst note = msg.payload.note;\nconst classification = msg.payload.classification;\n\n// Produce the query and variables vars to be signed\n\nconst variables = {\n        \"resourceSpecification\": {\n            \"defaultUnitOfResource\": unit_id,\n            \"name\": name,\n            \"note\": note,\n            \"resourceClassifiedAs\": classification\n\t    }\n    };\n\n\nconst query = `mutation ($resourceSpecification:ResourceSpecificationCreateParams!){\n  \t            createResourceSpecification(resourceSpecification:$resourceSpecification){\n                    resourceSpecification{\n                        id,\n                        name\n                    }\n                }\n            }`;\n\n// Store the variables for later processing\nmsg.variables = variables\n          \n// Define data for signature\nconst eddsa = msg.payload.eddsa;\nconst username = msg.payload.username;\n\nmsg.sign = {};\n\nmsg.sign.query = query;\nmsg.sign.eddsa = eddsa;\nmsg.sign.username = username;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":330,"y":720,"wires":[["21e3ef708e289378","1953a01fc897eb9c"]]},{"id":"dea2dc586e075728","type":"function","z":"a9cf961a3a52160c","name":"Format Reply","func":"const specId = msg.payload.data.createResourceSpecification.resourceSpecification.id;\n\n\nmsg.payload = {};\nmsg.payload.specId = specId;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":820,"y":720,"wires":[["1e377a5f89c87589"]]},{"id":"525b857facb27517","type":"http in","z":"a9cf961a3a52160c","name":"createResourceSpec","url":"/interfacer/createResourceSpec","method":"post","upload":false,"swaggerDoc":"","x":140,"y":720,"wires":[["a9dec105802ab695"]]},{"id":"1e377a5f89c87589","type":"http response","z":"a9cf961a3a52160c","name":"","statusCode":"","headers":{},"x":990,"y":720,"wires":[]},{"id":"b1049f596fbf4e40","type":"comment","z":"a9cf961a3a52160c","name":"Create resources specification","info":"","x":160,"y":660,"wires":[]},{"id":"beadd72e20548fee","type":"debug","z":"a9cf961a3a52160c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":590,"y":140,"wires":[]},{"id":"930cd99125d1479e","type":"http response","z":"a9cf961a3a52160c","name":"","statusCode":"","headers":{},"x":850,"y":240,"wires":[]},{"id":"8966a452ab67cbcd","type":"function","z":"a9cf961a3a52160c","name":"Format Reply","func":"// Read the payload\nvar id = msg.payload.data.createPerson.agent.id;\n\n// Provide an answer\nmsg.payload = {};\nmsg.payload.id = id;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":640,"y":240,"wires":[["930cd99125d1479e"]]},{"id":"4f5171cd09d1c858","type":"http request","z":"a9cf961a3a52160c","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":450,"y":240,"wires":[["12b72845a3237505","8966a452ab67cbcd"]]},{"id":"7f1cc66a89c6fe15","type":"function","z":"a9cf961a3a52160c","name":"Create Person","func":"\n\nmsg.headers = {};\nmsg.headers['content-type'] = 'application/json';\nmsg.headers['zenflows-admin'] = msg.payload.key;\n\nmsg.url = msg.payload.endpoint;\nmsg.method = 'POST';\n\nconst variables = {\n    \"person\": {\n        \"name\": msg.payload.name,\n        \"user\": msg.payload.username,\n        \"email\": msg.payload.email,\n        \"eddsaPublicKey\": msg.payload.eddsaPublicKey\n    }\n};\n\n// To get this in the debug output\nmsg.variables = variables\n\n// This is going to destroy the msg.payload!!!\nmsg.payload = JSON.stringify({\n  query: `mutation ($person: PersonCreateParams!){\n        createPerson(person: $person)\n        {\n            agent{\n                id\n                name\n                user\n                email\n                eddsaPublicKey\n            }\n        }\n    }`,\n  variables: variables\n})\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":280,"y":240,"wires":[["4f5171cd09d1c858","12b72845a3237505"]]},{"id":"12b72845a3237505","type":"debug","z":"a9cf961a3a52160c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":590,"y":300,"wires":[]},{"id":"2bf52a3634071bdb","type":"http in","z":"a9cf961a3a52160c","name":"createPerson","url":"/interfacer/createPerson","method":"post","upload":false,"swaggerDoc":"","x":110,"y":240,"wires":[["7f1cc66a89c6fe15"]]},{"id":"aedd97c488d9aa52","type":"comment","z":"a9cf961a3a52160c","name":"Create agents","info":"","x":110,"y":200,"wires":[]},{"id":"f114999c5ae92baa","type":"http response","z":"a9cf961a3a52160c","name":"","statusCode":"","headers":{},"x":1050,"y":360,"wires":[]},{"id":"89d96141b31db3d3","type":"function","z":"a9cf961a3a52160c","name":"Format Reply","func":"// Read the payload\nconst location = msg.payload.data.createSpatialThing.spatialThing.id;\n\nmsg.payload = {};\nmsg.payload.location = location;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":880,"y":360,"wires":[["f114999c5ae92baa"]]},{"id":"316ee28d745a44e4","type":"http request","z":"a9cf961a3a52160c","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":670,"y":360,"wires":[["08da7da1110298ac","89d96141b31db3d3"]]},{"id":"299bbb363c0afa96","type":"function","z":"a9cf961a3a52160c","name":"Data to sign","func":"// Call specific data\nconst name = msg.payload.name;\nconst lat = msg.payload.lat;\nconst long = msg.payload.long;\nconst addr = msg.payload.addr;\nconst note = msg.payload.note;\n\n// Produce the query and variables vars to be signed\nconst variables = {\n        \"location\": {\n            \"name\": name,\n            \"alt\": 0,\n            \"lat\": lat,\n            \"long\": long,\n            \"mappableAddress\": addr,\n            \"note\": note\n        }\n    };\n\nconst query = `mutation($location: SpatialThingCreateParams!) {\n            createSpatialThing(spatialThing: $location) {\n                spatialThing {\n                    id\n                }\n            }\n        }`;\n    \n// Store the variables for later processing\nmsg.variables = variables\n\n// Define data for signature\nconst eddsa = msg.payload.eddsa;\nconst username = msg.payload.username;\n\nmsg.sign = {};\n\nmsg.sign.query = query;\nmsg.sign.eddsa = eddsa;\nmsg.sign.username = username;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":290,"y":360,"wires":[["9ef6d03550d0dddf","08da7da1110298ac"]]},{"id":"08da7da1110298ac","type":"debug","z":"a9cf961a3a52160c","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":650,"y":420,"wires":[]},{"id":"ac77678c4d67fdde","type":"http in","z":"a9cf961a3a52160c","name":"createLocation","url":"/interfacer/createLocation","method":"post","upload":false,"swaggerDoc":"","x":120,"y":360,"wires":[["299bbb363c0afa96"]]},{"id":"5a3e26e2ecdf2fef","type":"comment","z":"a9cf961a3a52160c","name":"Create locations for agents","info":"","x":150,"y":320,"wires":[]},{"id":"9ef6d03550d0dddf","type":"subflow:f781100da59ddc5d","z":"a9cf961a3a52160c","name":"","x":470,"y":360,"wires":[["316ee28d745a44e4","08da7da1110298ac"]]},{"id":"cafeb261165160b1","type":"subflow:f781100da59ddc5d","z":"a9cf961a3a52160c","name":"","x":450,"y":520,"wires":[["41a31f091965c362","9a42dde3957dd0ad"]]},{"id":"9a42dde3957dd0ad","type":"debug","z":"a9cf961a3a52160c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":610,"y":620,"wires":[]},{"id":"1953a01fc897eb9c","type":"subflow:f781100da59ddc5d","z":"a9cf961a3a52160c","name":"","x":490,"y":720,"wires":[["383d01758c0eab1c","21e3ef708e289378"]]},{"id":"d4a01c7ff1aa60f2","type":"subflow:f781100da59ddc5d","z":"a9cf961a3a52160c","name":"","x":490,"y":840,"wires":[["75ad1ae27b0775fb"]]},{"id":"b1dddf12ee1a9e24","type":"subflow:f781100da59ddc5d","z":"a9cf961a3a52160c","name":"","x":450,"y":980,"wires":[["cf36936a5c75bfd6","6905f51ee38526b3"]]},{"id":"148fb20edbee43b8","type":"subflow:f781100da59ddc5d","z":"a9cf961a3a52160c","name":"","x":450,"y":1160,"wires":[["9395b1d5f101d921","2fdd738ccee21e9c"]]},{"id":"2fdd738ccee21e9c","type":"debug","z":"a9cf961a3a52160c","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":610,"y":1240,"wires":[]},{"id":"0d1e2c183fa42697","type":"subflow:f781100da59ddc5d","z":"a9cf961a3a52160c","name":"","x":450,"y":1400,"wires":[["1f51d816c9254a8e","78bbd41a6c118d6b"]]},{"id":"a79b4ab6bf5d8244","type":"inject","z":"29dcfb15ba1e5f55","name":"","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":120,"y":80,"wires":[["36c2b9b9f579da3c"]]},{"id":"36c2b9b9f579da3c","type":"function","z":"29dcfb15ba1e5f55","name":"SetUsers","func":"var users_data = {};\nusers_data['A'] = {\n    \"userChallenges\": {\n        \"whereParentsMet\": \"London\",\n        \"nameFirstPet\": \"Fuffy\",\n        \"nameFirstTeacher\": \"Jim\",\n        \"whereHomeTown\": \"Paris\",\n        \"nameMotherMaid\": \"Wright\"\n    },\n    \"name\": \"User A\",\n    \"username\": \"userA_username\",\n    \"email\": \"userA@example.org\",\n    \"note\": \"me.userA.org\"\n}\nusers_data['B'] = {\n    \"userChallenges\": {\n        \"whereParentsMet\": \"Amsterdam\",\n        \"nameFirstPet\": \"Toby\",\n        \"nameFirstTeacher\": \"Juliet\",\n        \"whereHomeTown\": \"Rome\",\n        \"nameMotherMaid\": \"Banks\"\n    },\n    \"name\": \"User B\",\n    \"username\": \"userB\",\n    \"email\": \"userB@example.org\",\n    \"note\": \"me.userB.org\"\n}\nflow.set(\"users_data\", users_data);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":300,"y":80,"wires":[["3725886bd3c50b6c"]]},{"id":"3725886bd3c50b6c","type":"function","z":"29dcfb15ba1e5f55","name":"SetLocations","func":"var locs_data = {};\nlocs_data['A'] = {\n    \"name\": \"OLVG\",\n    \"lat\": 52.35871773455108,\n    \"long\": 4.916762398221842,\n    \"addr\": \"Oosterpark 9, 1091 AC Amsterdam\",\n    \"note\": \"location.user1.org\"\n};\n\nlocs_data['B'] = {\n    \"name\": \"CleanLease\",\n    \"lat\": 51.47240440868687,\n    \"long\": 5.412460440524406,\n    \"addr\": \"De schakel 30, 5651 Eindhoven\",\n    \"note\": \"location.user2.org\"\n};\n\nflow.set(\"locs_data\", locs_data);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":470,"y":80,"wires":[["c6e618cdf181698b"]]},{"id":"7d4f4bdb4e7c6c95","type":"function","z":"29dcfb15ba1e5f55","name":"SetEmpyVars","func":"\nvar event_seq = [];\nvar process_data = {};\n\nflow.set(\"event_seq\", event_seq);\nflow.set(\"process_data\", process_data);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1280,"y":80,"wires":[[]]},{"id":"40df197a0716b1b7","type":"function","z":"29dcfb15ba1e5f55","name":"ReadHMAC","func":"\nvar queue = [\n    {\n        'user' : 'A',\n        'url': flow.get('server') + \"/read_HMAC\",\n    },\n    {\n        'user': 'B',\n        'url': flow.get('server') + \"/read_HMAC\",\n    }\n]\n\nfor (let event of queue) {\n    event['file'] = \"NotUsed\";\n    event['users_data'] = {\n        'var_name': \"users_data\",\n        };\n    event['endpoint'] = flow.get('endpoint');\n}\n\nflow.set(\"eventQueue\", queue); \n\nmsg.method = \"POST\"\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":330,"y":180,"wires":[["d720ae0d3494de59"]]},{"id":"b2ccc9e686bca31f","type":"inject","z":"29dcfb15ba1e5f55","name":"","props":[{"p":"timestamp","v":"","vt":"date"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":110,"y":180,"wires":[["40df197a0716b1b7"]]},{"id":"5b2f17ac3a241915","type":"function","z":"29dcfb15ba1e5f55","name":"SetGlobals","func":"var endpoint = \"https://zenflows.interfacer-staging.dyne.im/api\";\nvar server = 'http://0.0.0.0:8000';\n\nflow.set(\"endpoint\", endpoint);\nflow.set(\"server\", server);\n\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1110,"y":80,"wires":[["7d4f4bdb4e7c6c95"]]},{"id":"281f2125fecc5a96","type":"function","z":"29dcfb15ba1e5f55","name":"ReadKeyPair","func":"var queue = [\n    {\n        'user' : 'A',\n        'url': flow.get('server')+ \"/read_keypair\",\n    },\n    {\n        'user': 'B',\n        'url': flow.get('server')+ \"/read_keypair\",\n    }\n]\n\nfor (let event of queue) {\n    event['file'] = \"NotUsed\";\n    event['users_data'] = {\n        'var_name': \"users_data\",\n        };\n    event['endpoint'] = flow.get('endpoint');\n}\n\nflow.set(\"eventQueue\", queue); \n\nmsg.method = \"POST\"\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":330,"y":280,"wires":[["19fe852f898001fa"]]},{"id":"f9e9f6894f2fb3ec","type":"function","z":"29dcfb15ba1e5f55","name":"GetIDPerson","func":"var queue = [\n    {\n        'user' : 'A',\n        'url': flow.get('server')+ \"/get_id_person\",\n    },\n    {\n        'user': 'B',\n        'url': flow.get('server')+ \"/get_id_person\",\n    }\n]\n\nfor (let event of queue) {\n    event['file'] = \"NotUsed\";\n    event['users_data'] = {\n        'var_name': \"users_data\",\n        };\n    event['endpoint'] = flow.get('endpoint');\n}\n\nflow.set(\"eventQueue\", queue); \n\nmsg.method = \"POST\"\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":310,"y":380,"wires":[["6dee989894181e09"]]},{"id":"a66652e23c1e09a1","type":"function","z":"29dcfb15ba1e5f55","name":"GetLocationID","func":"var queue = [\n    {\n        'user' : 'A',\n        'user_data': {\n            'var_name': 'users_data',\n            'var_label': 'A'\n        },\n        'url': flow.get('server')+ \"/get_location_id\",\n    },\n    {\n        'user': 'B',\n        'user_data': {\n            'var_name': 'users_data',\n            'var_label': 'B'\n        },\n        'url': flow.get('server')+ \"/get_location_id\",\n    }\n]\n\nfor (let event of queue) {\n    event['file'] = \"NotUsed\";\n    event['locs_data'] = {\n        'var_name': 'locs_data',\n    }\n    event['endpoint'] = flow.get('endpoint');\n}\n\nflow.set(\"eventQueue\", queue); \n\nmsg.method = \"POST\"\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":320,"y":480,"wires":[["cd1126d9e7f9852f"]]},{"id":"74d4ae7a509ae173","type":"function","z":"29dcfb15ba1e5f55","name":"SetUserLocation","func":"var queue = [\n    {\n        'user' : 'A',\n        'url': flow.get('server')+ \"/set_user_location\",\n    },\n    {\n        'user': 'B',\n        'url': flow.get('server')+ \"/set_user_location\",\n    }\n]\n\nfor (let event of queue) {\n    event['file'] = \"NotUsed\";\n    event['users_data'] = {\n        'var_name': 'users_data',\n    };\n    event['locs_data'] = {\n        'var_name': 'locs_data',\n    }\n    event['endpoint'] = flow.get('endpoint');\n}\n\nflow.set(\"eventQueue\", queue); \n\nmsg.method = \"POST\"\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":290,"y":580,"wires":[["8effc2f6a0b68f53"]]},{"id":"f00e3b811f3a960d","type":"function","z":"29dcfb15ba1e5f55","name":"GetUnitId","func":"var queue = [];\n\nconst units_def = flow.get('units_def')\n\nfor (let unit of units_def) {\n    var event = {};\n    event[\"name\"] = unit.name;\n    event[\"label\"] = unit.label;\n    event[\"symbol\"] = unit.symbol;\n    event['file'] = \"NotUsed\";\n    event['user_data'] = {\n        'var_name': 'users_data',\n        'var_label': 'A',\n    };\n    event['units_data'] = {\n        'var_name': 'units_data',\n    }\n    event['endpoint'] = flow.get('endpoint');\n    event['url'] = flow.get('server') + \"/get_unit_id\";\n    queue.push(event);\n}\n\nflow.set(\"eventQueue\", queue); \n\nmsg.method = \"POST\"\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":320,"y":680,"wires":[["6a378dc92f921375"]]},{"id":"7cd02e8eefd69b8d","type":"function","z":"29dcfb15ba1e5f55","name":"GetResSpecId","func":"var res_specs_def = flow.get('res_specs_def');\n\nvar queue = [];\n\nfor (let res of Object.keys(res_specs_def)) {\n    var event = {};\n    event['name'] = res;\n    event['note'] = res_specs_def[res]['note'];\n    event['classification'] = res_specs_def[res]['classification'];\n    event['default_unit_id'] = res_specs_def[res]['default_unit_id'];\n    if (! Array.isArray(event['default_unit_id']['var_label'])){\n        throw event['default_unit_id']['var_label'] + \" not an Array \" +typeof(event['default_unit_id']['var_label']);\n    }\n    event['file'] = \"NotUsed\";\n    event['user_data'] = {\n        'var_name': 'users_data',\n        'var_label': 'B'\n    };\n    event['res_spec_data'] = {\n        'var_name': 'res_spec_data',\n    };\n    event['endpoint'] = flow.get(\"endpoint\");\n    event['url'] = flow.get('server') + \"/get_resource_spec_id\";\n    queue.push(event);\n}\n\nflow.set(\"eventQueue\", queue);\n\nmsg.method = \"POST\"\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":320,"y":780,"wires":[["40c9d2d14d3d78db"]]},{"id":"83403a42b69c33fe","type":"function","z":"29dcfb15ba1e5f55","name":"GetResources","func":"\nvar resources_def = flow.get('resources_def');\n\nvar queue = [];\n\nfor (let res of Object.keys(resources_def)) {\n    var event = {};\n    event['res_name'] = res;\n    event['amount'] = resources_def[res]['amount'];\n    \n    event['res_data'] = {\n        'var_name': 'res_data',\n    };\n    event['res_spec_data'] = {\n        'var_name': 'res_spec_data',\n    };\n    \n    event['user_data'] = {\n        'var_name': 'users_data',\n        'var_label': resources_def[res]['owner'],\n    };\n    event['event_seq'] = [];\n    event['endpoint'] = flow.get(\"endpoint\");\n    event['url'] = flow.get('server')+ \"/get_resource\";\n    node.log(JSON.stringify(event));\n    queue.push(event);\n}\n\nflow.set(\"eventQueue\", queue);\n\nmsg.method = \"POST\"\n\nreturn msg;\n\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":320,"y":980,"wires":[["cf725a444c144f21"]]},{"id":"a1c02244deb63125","type":"inject","z":"29dcfb15ba1e5f55","name":"","props":[{"p":"timestamp","v":"","vt":"date"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":90,"y":980,"wires":[["83403a42b69c33fe"]]},{"id":"a6a44cfaba4315fd","type":"function","z":"29dcfb15ba1e5f55","name":"GetProcess","func":"var processes_def = flow.get(\"processes_def\");\n\n\nvar queue = [];\n\nfor (let process of Object.keys(processes_def)) {\n    var event = {};\n    event['process_name'] = process;\n    event['note'] = processes_def[process]['note'];\n    var user = processes_def[process]['user'];\n    event['user_data'] = {\n        'var_name': 'users_data',\n        'var_label': user,\n    }\n    event['endpoint'] = flow.get(\"endpoint\");\n    event['process_data'] = {\n        'var_name': 'process_data'\n    }\n    event['url'] = flow.get('server') + \"/get_process\";\n    \n    queue.push(event);\n}\n\nflow.set(\"eventQueue\", queue);\n\nmsg.method = \"POST\"\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":330,"y":880,"wires":[["52f125f87e8af152"]]},{"id":"d2d782c088b4263e","type":"inject","z":"29dcfb15ba1e5f55","name":"","props":[{"p":"timestamp","v":"","vt":"date"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":90,"y":1100,"wires":[["ae91ea7aec1883b0"]]},{"id":"ae91ea7aec1883b0","type":"function","z":"29dcfb15ba1e5f55","name":"CreateEvents","func":"// Read variable we need before setting up the queue\nvar res_spec_data = flow.get('res_spec_data');\nvar res_data = flow.get('res_data');\n\n// Resource to be created\nres_data['gown'] = {\n    \"res_ref_id\": 'gown-' + Math.floor(Math.random() * 10000),\n    \"name\": 'gown',\n    \"spec_id\": res_spec_data['gown']['id']\n};\nflow.set('res_data', res_data);\n\n// Effort specification for work\nvar effort_spec = {};\neffort_spec['unit_id'] = res_spec_data['surgical_operation']['defaultUnit'];\neffort_spec['spec_id'] = res_spec_data['surgical_operation']['id'];\neffort_spec['amount'] = 80;\n\nflow.set('effort_spec', effort_spec);\n\n// This queue contains all the events to create\n// Note that given variables can be modified by previous messages,\n// here we reference the name of the variable and optional label \n// to retrieve from the flow environment.\n\nvar queue = [\n    {\n        'provider': {\n            'var_name': 'users_data',\n            'var_label': 'B'\n        },\n        'action': 'consume',\n        'note': 'consume cotton for sewing',\n        'amount': 10,\n        'process': {\n            'var_name': 'process_data',\n            'var_label': 'Sew_gown'\n        },\n        'existing_res': {\n            'var_name': 'res_data',\n            'var_label': 'cotton'\n        },\n        'new_res': undefined,\n        'effort_spec': undefined,\n        'receiver': undefined,\n        'process2': undefined,\n        'add_process': true,\n        'url': flow.get('server') + '/create_event_wrapped',\n    },\n    {\n        'provider': {\n            'var_name': 'users_data',\n            'var_label': 'B'\n        },\n        'action': 'produce',\n        'note': 'produce gown',\n        'amount': 1,\n        'process': {\n            'var_name': 'process_data',\n            'var_label': 'Sew_gown'\n        },\n        'existing_res': undefined,\n        'new_res':  {\n            'var_name': 'res_data',\n            'var_label': 'gown'\n        },\n        'effort_spec': undefined,\n        'receiver': undefined,\n        'process2': undefined,\n        'add_process': false,\n        'url': flow.get('server') + '/create_event_wrapped',\n    },\n    {\n        'provider': {\n            'var_name': 'users_data',\n            'var_label': 'B'\n        },\n        'action': 'transfer-custody',\n        'note': 'Transfer gowns to hospital',\n        'receiver': {\n            'var_name': 'users_data',\n            'var_label': 'A'\n        },\n        'amount': 1,\n        'existing_res': {\n            'var_name': 'res_data',\n            'var_label': 'gown'\n        },\n        'locs_data': {\n            'var_name': 'locs_data',\n        },\n        'url': flow.get('server') + '/make_transfer_wrapped',\n    },\n    {\n        'provider': {\n            'var_name': 'users_data',\n            'var_label': 'A'\n        },\n        'action': 'work',\n        'note': 'work perform surgery',\n        'amount': 0,\n        'process': {\n            'var_name': 'process_data',\n            'var_label': 'Use_gown'\n        },\n        'existing_res': undefined,\n        'new_res': undefined,\n        'effort_spec': {\n            'var_name': 'effort_spec',\n        },\n        'receiver': undefined,\n        'process2': undefined,\n        'add_process': false,\n        'url': flow.get('server') + '/create_event_wrapped',\n    },\n    {\n        'provider': {\n            'var_name': 'users_data',\n            'var_label': 'A'\n        },\n        'action': 'accept',\n        'note': 'accept use for surgery',\n        'amount': 1,\n        'process': {\n            'var_name': 'process_data',\n            'var_label': 'Use_gown'\n        },\n        'existing_res':  {\n            'var_name': 'res_data',\n            'var_label': 'gown'\n        },\n        'new_res': undefined,\n        'effort_spec': undefined,\n        'receiver': undefined,\n        'process2': undefined,\n        'add_process': true,\n        'url': flow.get('server') + '/create_event_wrapped',\n    },\n    {\n        'provider': {\n            'var_name': 'users_data',\n            'var_label': 'A'\n        },\n        'action': 'modify',\n        'note': 'modify dirty after use',\n        'amount': 1,\n        'process': {\n            'var_name': 'process_data',\n            'var_label': 'Use_gown'\n        },\n        'existing_res':  {\n            'var_name': 'res_data',\n            'var_label': 'gown'\n        },\n        'new_res': undefined,\n        'effort_spec': undefined,\n        'receiver': undefined,\n        'process2': undefined,\n        'add_process': false,\n        'url': flow.get('server') + '/create_event_wrapped',\n    },\n    {\n        'provider': {\n            'var_name': 'users_data',\n            'var_label': 'A'\n        },\n        'action': 'transfer-custody',\n        'note': 'Transfer gowns to cleaner',\n        'receiver': {\n            'var_name': 'users_data',\n            'var_label': 'B'\n        },\n        'amount': 1,\n        'existing_res': {\n            'var_name': 'res_data',\n            'var_label': 'gown'\n        },\n        'locs_data': {\n            'var_name': 'locs_data',\n        },\n        'url': flow.get('server') + '/make_transfer_wrapped',\n    },\n    {\n        'provider': {\n            'var_name': 'users_data',\n            'var_label': 'B'\n        },\n        'action': 'accept',\n        'note': 'accept gowns to be cleaned',\n        'amount': 1,\n        'process': {\n            'var_name': 'process_data',\n            'var_label': 'Clean_gown'\n        },\n        'existing_res': {\n            'var_name': 'res_data',\n            'var_label': 'gown'\n        },\n        'new_res': undefined,\n        'effort_spec': undefined,\n        'receiver': undefined,\n        'process2': undefined,\n        'add_process': false,\n        'url': flow.get('server') + '/create_event_wrapped',\n    },\n    {\n        'provider': {\n            'var_name': 'users_data',\n            'var_label': 'B'\n        },\n        'action': 'consume',\n        'note': 'consume water for the washing',\n        'amount': 25,\n        'process': {\n            'var_name': 'process_data',\n            'var_label': 'Clean_gown'\n        },\n        'existing_res': {\n            'var_name': 'res_data',\n            'var_label': 'water'\n        },\n        'new_res': undefined,\n        'effort_spec': undefined,\n        'receiver': undefined,\n        'process2': undefined,\n        'add_process': false,\n        'url': flow.get('server') + '/create_event_wrapped',\n    },\n    {\n        'provider': {\n            'var_name': 'users_data',\n            'var_label': 'B'\n        },\n        'action': 'consume',\n        'note': 'consume soap for the washing',\n        'amount': 50,\n        'process': {\n            'var_name': 'process_data',\n            'var_label': 'Clean_gown'\n        },\n        'existing_res': {\n            'var_name': 'res_data',\n            'var_label': 'soap'\n        },\n        'new_res': undefined,\n        'effort_spec': undefined,\n        'receiver': undefined,\n        'process2': undefined,\n        'add_process': true,\n        'url': flow.get('server') + '/create_event_wrapped',\n    },\n    {\n        'provider': {\n            'var_name': 'users_data',\n            'var_label': 'B'\n        },\n        'action': 'modify',\n        'note': 'modify clean after washing',\n        'amount': 1,\n        'process': {\n            'var_name': 'process_data',\n            'var_label': 'Clean_gown'\n        },\n        'existing_res': {\n            'var_name': 'res_data',\n            'var_label': 'gown'\n        },\n        'new_res': undefined,\n        'effort_spec': undefined,\n        'receiver': undefined,\n        'process2': undefined,\n        'add_process': false,\n        'url': flow.get('server') + '/create_event_wrapped',\n    },\n];\n\n// Common to all events\nfor (let event of queue) {\n    event['rec_event'] = {};\n    event['res_spec_data'] = res_spec_data;\n    event['endpoint'] = flow.get('endpoint');\n}\n\nflow.set(\"eventQueue\", queue);\n\nmsg.method = 'POST'\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":320,"y":1100,"wires":[["40096929cc67b7ca"]]},{"id":"e5e72bc7560717a2","type":"function","z":"29dcfb15ba1e5f55","name":"MakeTransfer","func":"var users_data = flow.get('users_data');\nvar process_data = flow.get('process_data');\nvar res_spec_data = flow.get('res_spec_data');\nvar res_data = flow.get('res_data');\nvar locs_data = flow.get('locs_data');\n\n\nvar events = [\n    {\n        'provider': users_data['B'],\n        'action': 'transfer-custody',\n        'note': 'Transfer gowns to hospital',\n        'receiver': users_data['A'],\n        'amount': 1,\n        'existing_res': res_data['gown'],\n    },\n\n];\n\nmsg.method = 'POST'\nmsg.url = flow.get('server') + '/make_transfer_wrapped'\n\nmsg.payload = {\n    'rec_event': {},\n    'locs_data': locs_data,\n    'res_spec_data': res_spec_data,\n    'endpoint': flow.get('endpoint')\n};\n\n// event_id, ts = create_event(users_data['B'], action, event_note, amount=amount, process=cur_pros, \\\n// res_spec_data = res_spec_data, existing_res = cur_res, endpoint = ENDPOINT)\n\nfor (let event of events) {\n\n    for (let field of Object.keys(event)) {\n        msg.payload[field] = event[field];\n    }\n\n    node.send(msg); // Send the message\n}\n\n// return msg;\nreturn\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":100,"y":1300,"wires":[[]]},{"id":"ee0e8467365e8e70","type":"function","z":"29dcfb15ba1e5f55","name":"CreateEvent","func":"var users_data = flow.get('users_data');\nvar process_data = flow.get('process_data');\nvar res_spec_data = flow.get('res_spec_data');\nvar res_data = flow.get('res_data');\n\nvar effort_spec = {};\neffort_spec['unit_id'] = res_spec_data['surgical_operation']['defaultUnit'];\neffort_spec['spec_id'] = res_spec_data['surgical_operation']['id'];\neffort_spec['amount'] = 80;\n\nvar events = [\n    {\n        'provider': users_data['A'],\n        'action': 'work',\n        'note': 'work perform surgery',\n        'amount': 0,\n        'process': process_data['Use_gown'],\n        'existing_res': undefined,\n        'new_res': undefined,\n        'effort_spec': effort_spec,\n        'receiver': undefined,\n        'process2': undefined\n    },\n    {\n        'provider': users_data['A'],\n        'action': 'accept',\n        'note': 'accept use for surgery',\n        'amount': 1,\n        'process': process_data['Use_gown'],\n        'existing_res': res_data['gown'],\n        'new_res': undefined,\n        'effort_spec': undefined,\n        'receiver': undefined,\n        'process2': undefined,\n        'add_process': true,\n    },\n    {\n        'provider': users_data['A'],\n        'action': 'modify',\n        'note': 'modify dirty after use',\n        'amount': 1,\n        'process': process_data['Use_gown'],\n        'existing_res': res_data['gown'],\n        'new_res': undefined,\n        'effort_spec': undefined,\n        'receiver': undefined,\n        'process2': undefined\n    },\n];\n\nmsg.method = 'POST'\nmsg.url = flow.get('server') + '/create_event_wrapped'\n\nmsg.payload = {\n    'rec_event': {},\n    'res_spec_data': res_spec_data,\n    'add_process': false,\n    'endpoint': flow.get('endpoint')\n};\n\n// event_id, ts = create_event(users_data['B'], action, event_note, amount=amount, process=cur_pros, \\\n// res_spec_data = res_spec_data, existing_res = cur_res, endpoint = ENDPOINT)\n\nfor (let event of events) {\n\n    for (let field of Object.keys(event)) {\n        msg.payload[field] = event[field];\n    }\n\n    node.send(msg); // Send the message\n}\n\n// return msg;\nreturn\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":290,"y":1300,"wires":[[]]},{"id":"9eb03e5138ca7f87","type":"function","z":"29dcfb15ba1e5f55","name":"MakeTransfer","func":"var users_data = flow.get('users_data');\nvar process_data = flow.get('process_data');\nvar res_spec_data = flow.get('res_spec_data');\nvar res_data = flow.get('res_data');\nvar locs_data = flow.get('locs_data');\n\n\nvar events = [\n    {\n        'provider': users_data['A'],\n        'action': 'transfer-custody',\n        'note': 'Transfer gowns to cleaner',\n        'receiver': users_data['B'],\n        'amount': 1,\n        'existing_res': res_data['gown'],\n    },\n\n];\n\nmsg.method = 'POST'\nmsg.url = flow.get('server') + '/make_transfer_wrapped'\n\nmsg.payload = {\n    'rec_event': {},\n    'locs_data': locs_data,\n    'res_spec_data': res_spec_data,\n    'endpoint': flow.get('endpoint')\n};\n\n// event_id, ts = create_event(users_data['B'], action, event_note, amount=amount, process=cur_pros, \\\n// res_spec_data = res_spec_data, existing_res = cur_res, endpoint = ENDPOINT)\n\nfor (let event of events) {\n\n    for (let field of Object.keys(event)) {\n        msg.payload[field] = event[field];\n    }\n\n    node.send(msg); // Send the message\n}\n\n// return msg;\nreturn\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":480,"y":1300,"wires":[[]]},{"id":"f102e7be089912ab","type":"function","z":"29dcfb15ba1e5f55","name":"CreateEvent","func":"var users_data = flow.get('users_data');\nvar process_data = flow.get('process_data');\nvar res_spec_data = flow.get('res_spec_data');\nvar res_data = flow.get('res_data');\n\nvar effort_spec = {};\neffort_spec['unit_id'] = res_spec_data['surgical_operation']['defaultUnit'];\neffort_spec['spec_id'] = res_spec_data['surgical_operation']['id'];\neffort_spec['amount'] = 80;\n\nvar events = [\n    {\n        'provider': users_data['B'],\n        'action': 'accept',\n        'note': 'accept gowns to be cleaned',\n        'amount': 1,\n        'process': process_data['Clean_gown'],\n        'existing_res': res_data['gown'],\n        'new_res': undefined,\n        'effort_spec': undefined,\n        'receiver': undefined,\n        'process2': undefined\n    },\n    {\n        'provider': users_data['B'],\n        'action': 'consume',\n        'note': 'consume water for the washing',\n        'amount': 25,\n        'process': process_data['Clean_gown'],\n        'existing_res': res_data['water'],\n        'new_res': undefined,\n        'effort_spec': undefined,\n        'receiver': undefined,\n        'process2': undefined,\n    },\n    {\n        'provider': users_data['B'],\n        'action': 'consume',\n        'note': 'consume soap for the washing',\n        'amount': 50,\n        'process': process_data['Clean_gown'],\n        'existing_res': res_data['soap'],\n        'new_res': undefined,\n        'effort_spec': undefined,\n        'receiver': undefined,\n        'process2': undefined,\n        'add_process': true,\n    },\n    {\n        'provider': users_data['B'],\n        'action': 'modify',\n        'note': 'modify clean after washing',\n        'amount': 1,\n        'process': process_data['Clean_gown'],\n        'existing_res': res_data['gown'],\n        'new_res': undefined,\n        'effort_spec': undefined,\n        'receiver': undefined,\n        'process2': undefined,\n    },\n];\n\nmsg.method = 'POST'\nmsg.url = flow.get('server') + '/create_event_wrapped'\n\nmsg.payload = {\n    'rec_event': {},\n    'res_spec_data': res_spec_data,\n    'add_process': false,\n    'endpoint': flow.get('endpoint')\n};\n\n// event_id, ts = create_event(users_data['B'], action, event_note, amount=amount, process=cur_pros, \\\n// res_spec_data = res_spec_data, existing_res = cur_res, endpoint = ENDPOINT)\n\nfor (let event of events) {\n\n    for (let field of Object.keys(event)) {\n        msg.payload[field] = event[field];\n    }\n\n    node.send(msg); // Send the message\n}\n\n// return msg;\nreturn\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":670,"y":1300,"wires":[[]]},{"id":"d720ae0d3494de59","type":"function","z":"29dcfb15ba1e5f55","name":"UnqueueMsg","func":"// Send message from the queue\nlet queue = flow.get(\"eventQueue\") || [];\n\nif (queue.length > 0) {\n    let next = queue.shift();\n    flow.set(\"eventQueue\", queue);\n    // Reset the payload since we are looping\n    msg.payload = {};\n    for (let field of Object.keys(next)) {\n        if (field == 'url'){\n            // This is the endpoint to contact\n            msg.url = next[field];\n        }else if (typeof(next[field]) == \"object\" && 'var_name' in next[field]){\n            // This is the variable and optional label that we need to retrieve\n            // from the flow environment\n            var flowvar = flow.get(next[field]['var_name'])\n            if ('var_label' in next[field]){\n                // Only the particular subfield to be used\n                msg.payload[field] = flowvar[next[field]['var_label']];\n            }else{\n                // All variable to be used\n                msg.payload[field] = flowvar;\n            }\n        }else{\n            // Static scalar value\n            msg.payload[field] = next[field];\n        }\n    }\n    return [msg,null];  // send next message\n} else {\n    node.status({fill:\"green\", shape:\"dot\", text:\"All messages sent\"});\n    return [null,{}];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":540,"y":180,"wires":[["508eeadb89f74464","27c51b58c2c741d6"],["281f2125fecc5a96"]]},{"id":"27c51b58c2c741d6","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 2","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":540,"y":140,"wires":[]},{"id":"508eeadb89f74464","type":"http request","z":"29dcfb15ba1e5f55","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[{"keyType":"other","keyValue":"content-type","valueType":"other","valueValue":"application/json"}],"x":750,"y":180,"wires":[["b5019dde096fea4b","0cfebc43789fb5e3"]]},{"id":"b5019dde096fea4b","type":"function","z":"29dcfb15ba1e5f55","name":"CopyResults","func":"\nconst user_ret = msg.payload.result.user || {};\nconst user_data_ret = msg.payload.result[\"user_data\"] || {};\nconst users_data_ret = msg.payload.result[\"users_data\"] || {};\nconst locs_data_ret = msg.payload.result[\"locs_data\"] || {};\nconst units_data_ret = msg.payload.result[\"units_data\"] || {};\nconst res_spec_data_ret = msg.payload.result[\"res_spec_data\"] || {};\nconst res_data_ret = msg.payload.result[\"res_data\"] || {};\nconst process_data_ret = msg.payload.result[\"process_data\"] || {};\nconst action_ret = msg.payload.result[\"action\"] || undefined;\n\nvar updates = 0;\n\nif ((Object.keys(user_data_ret).length !== 0) && (Object.keys(users_data_ret).length !== 0)) {\n    throw \"user_data and users_data returned\";\n}\nif (Object.keys(locs_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"locs_data is returned but no user is given\";\n    } else {\n        var locs_data = flow.get(\"locs_data\");\n        locs_data[user_ret] = locs_data_ret[user_ret];\n        flow.set(\"locs_data\", locs_data);\n        updates += 1;\n        node.log(\"locs_data updated\");\n    }\n}\n\nif (Object.keys(units_data_ret).length !== 0) {\n    const unit_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (unit_name_ret == undefined) {\n        throw \"units_data is returned but no unit name is given\";\n    } else {\n        var units_data = flow.get(\"units_data\");\n        units_data[unit_name_ret] = units_data_ret[unit_name_ret];\n        flow.set(\"units_data\", units_data);\n        updates += 1;\n        node.log(\"units_data updated\");\n    }\n}\nif (Object.keys(res_spec_data_ret).length !== 0) {\n    const res_spec_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (res_spec_name_ret == undefined) {\n        throw \"res_spec_data is returned but no res spec name is given\";\n    } else {\n        var res_spec_data = flow.get(\"res_spec_data\");\n        res_spec_data[res_spec_name_ret] = res_spec_data_ret[res_spec_name_ret];\n        flow.set(\"res_spec_data\", res_spec_data);\n        updates += 1;\n        node.log(\"res_spec_data updated\");\n    }\n}\nif (Object.keys(res_data_ret).length !== 0) {\n    const res_name_ret = msg.payload.result[\"res_name\"] || undefined;\n    const event_seq_ret = msg.payload.result[\"event_seq\"] || undefined;\n    if (event_seq_ret == undefined || event_seq_ret.length != 1) {\n        throw \"No or more than one event returned\" + event_seq_ret;\n    }\n\n    if (res_name_ret == undefined) {\n        throw \"res_data is returned but no res name is given\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    event_seq.push(event_seq_ret[0]);\n    flow.set(\"event_seq\", event_seq);\n\n    var res_data = flow.get(\"res_data\");\n    res_data[res_name_ret] = res_data_ret[res_name_ret];\n    flow.set(\"res_data\", res_data);\n    updates += 1;\n    node.log(\"res_data updated\");\n}\nif (Object.keys(process_data_ret).length !== 0) {\n    const process_name_ret = msg.payload.result[\"process_name\"] || undefined;\n    if (process_name_ret == undefined) {\n        throw \"process_data is returned but no process name is given\";\n    }\n    var process_data = flow.get(\"process_data\");\n    process_data[process_name_ret] = process_data_ret[process_name_ret];\n    flow.set(\"process_data\", process_data);\n    updates += 1;\n    node.log(\"process_data updated\");\n}\nif (Object.keys(user_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"user_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = user_data_ret;\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (Object.keys(users_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"users_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = users_data_ret[user_ret];\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (action_ret != undefined) {\n    const existing_res_ret = msg.payload.result[\"existing_res\"] || {};\n    const new_res_ret = msg.payload.result[\"new_res\"] || {};\n\n    if (Object.keys(existing_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[existing_res_ret['name']] = existing_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"existing res_data in event updated\");\n    }\n    if (Object.keys(new_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[new_res_ret['name']] = new_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"new res_data in event updated\");\n    }\n\n    const rec_event_ret = msg.payload.result[\"rec_event\"] || undefined;\n    if (rec_event_ret == undefined) {\n        throw \"action provided but no event recorded\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    if (!'action' in rec_event_ret){\n        throw \"No action recorded in event\";\n    }\n    var event = {};\n    for (let key of Object.keys(rec_event_ret['action'])){\n        event[key] = rec_event_ret['action'][key];\n    }\n    event_seq.push(event);\n    if ('process' in rec_event_ret){\n        var event = {};\n        for (let key of Object.keys(rec_event_ret['process'])){\n            event[key] = rec_event_ret['process'][key];\n        }\n        event_seq.push(event);\n    }\n    flow.set(\"event_seq\", event_seq);\n    node.log(\"event added\");\n    updates += 1;\n}\n\nif (updates != 1) {\n    throw \"Incorrect number of updates performed: \" + updates;\n}\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":930,"y":180,"wires":[["d720ae0d3494de59","fd9d50492c3fc2aa"]]},{"id":"0cfebc43789fb5e3","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 3","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":740,"y":140,"wires":[]},{"id":"fd9d50492c3fc2aa","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 4","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":920,"y":140,"wires":[]},{"id":"814c34340c2a2a35","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 1","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":540,"y":240,"wires":[]},{"id":"19fe852f898001fa","type":"function","z":"29dcfb15ba1e5f55","name":"UnqueueMsg","func":"// Send message from the queue\nlet queue = flow.get(\"eventQueue\") || [];\n\nif (queue.length > 0) {\n    let next = queue.shift();\n    flow.set(\"eventQueue\", queue);\n    // Reset the payload since we are looping\n    msg.payload = {};\n    for (let field of Object.keys(next)) {\n        if (field == 'url'){\n            // This is the endpoint to contact\n            msg.url = next[field];\n        }else if (typeof(next[field]) == \"object\" && 'var_name' in next[field]){\n            // This is the variable and optional label that we need to retrieve\n            // from the flow environment\n            var flowvar = flow.get(next[field]['var_name'])\n            if ('var_label' in next[field]){\n                // Only the particular subfield to be used\n                msg.payload[field] = flowvar[next[field]['var_label']];\n            }else{\n                // All variable to be used\n                msg.payload[field] = flowvar;\n            }\n        }else{\n            // Static scalar value\n            msg.payload[field] = next[field];\n        }\n    }\n    return [msg,null];  // send next message\n} else {\n    node.status({fill:\"green\", shape:\"dot\", text:\"All messages sent\"});\n    return [null,{}];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":540,"y":280,"wires":[["cc2de90cbe61f808","814c34340c2a2a35"],["f9e9f6894f2fb3ec"]]},{"id":"9404b87cad2efb64","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 2","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":740,"y":240,"wires":[]},{"id":"cc2de90cbe61f808","type":"http request","z":"29dcfb15ba1e5f55","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[{"keyType":"other","keyValue":"content-type","valueType":"other","valueValue":"application/json"}],"x":750,"y":280,"wires":[["3aa19a3f9fd50824","9404b87cad2efb64"]]},{"id":"b4df4e3448eecb7f","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 3","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":920,"y":240,"wires":[]},{"id":"3aa19a3f9fd50824","type":"function","z":"29dcfb15ba1e5f55","name":"CopyResults","func":"\nconst user_ret = msg.payload.result.user || {};\nconst user_data_ret = msg.payload.result[\"user_data\"] || {};\nconst users_data_ret = msg.payload.result[\"users_data\"] || {};\nconst locs_data_ret = msg.payload.result[\"locs_data\"] || {};\nconst units_data_ret = msg.payload.result[\"units_data\"] || {};\nconst res_spec_data_ret = msg.payload.result[\"res_spec_data\"] || {};\nconst res_data_ret = msg.payload.result[\"res_data\"] || {};\nconst process_data_ret = msg.payload.result[\"process_data\"] || {};\nconst action_ret = msg.payload.result[\"action\"] || undefined;\n\nvar updates = 0;\n\nif ((Object.keys(user_data_ret).length !== 0) && (Object.keys(users_data_ret).length !== 0)) {\n    throw \"user_data and users_data returned\";\n}\nif (Object.keys(locs_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"locs_data is returned but no user is given\";\n    } else {\n        var locs_data = flow.get(\"locs_data\");\n        locs_data[user_ret] = locs_data_ret[user_ret];\n        flow.set(\"locs_data\", locs_data);\n        updates += 1;\n        node.log(\"locs_data updated\");\n    }\n}\n\nif (Object.keys(units_data_ret).length !== 0) {\n    const unit_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (unit_name_ret == undefined) {\n        throw \"units_data is returned but no unit name is given\";\n    } else {\n        var units_data = flow.get(\"units_data\");\n        units_data[unit_name_ret] = units_data_ret[unit_name_ret];\n        flow.set(\"units_data\", units_data);\n        updates += 1;\n        node.log(\"units_data updated\");\n    }\n}\nif (Object.keys(res_spec_data_ret).length !== 0) {\n    const res_spec_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (res_spec_name_ret == undefined) {\n        throw \"res_spec_data is returned but no res spec name is given\";\n    } else {\n        var res_spec_data = flow.get(\"res_spec_data\");\n        res_spec_data[res_spec_name_ret] = res_spec_data_ret[res_spec_name_ret];\n        flow.set(\"res_spec_data\", res_spec_data);\n        updates += 1;\n        node.log(\"res_spec_data updated\");\n    }\n}\nif (Object.keys(res_data_ret).length !== 0) {\n    const res_name_ret = msg.payload.result[\"res_name\"] || undefined;\n    const event_seq_ret = msg.payload.result[\"event_seq\"] || undefined;\n    if (event_seq_ret == undefined || event_seq_ret.length != 1) {\n        throw \"No or more than one event returned\" + event_seq_ret;\n    }\n\n    if (res_name_ret == undefined) {\n        throw \"res_data is returned but no res name is given\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    event_seq.push(event_seq_ret[0]);\n    flow.set(\"event_seq\", event_seq);\n\n    var res_data = flow.get(\"res_data\");\n    res_data[res_name_ret] = res_data_ret[res_name_ret];\n    flow.set(\"res_data\", res_data);\n    updates += 1;\n    node.log(\"res_data updated\");\n}\nif (Object.keys(process_data_ret).length !== 0) {\n    const process_name_ret = msg.payload.result[\"process_name\"] || undefined;\n    if (process_name_ret == undefined) {\n        throw \"process_data is returned but no process name is given\";\n    }\n    var process_data = flow.get(\"process_data\");\n    process_data[process_name_ret] = process_data_ret[process_name_ret];\n    flow.set(\"process_data\", process_data);\n    updates += 1;\n    node.log(\"process_data updated\");\n}\nif (Object.keys(user_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"user_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = user_data_ret;\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (Object.keys(users_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"users_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = users_data_ret[user_ret];\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (action_ret != undefined) {\n    const existing_res_ret = msg.payload.result[\"existing_res\"] || {};\n    const new_res_ret = msg.payload.result[\"new_res\"] || {};\n\n    if (Object.keys(existing_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[existing_res_ret['name']] = existing_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"existing res_data in event updated\");\n    }\n    if (Object.keys(new_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[new_res_ret['name']] = new_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"new res_data in event updated\");\n    }\n\n    const rec_event_ret = msg.payload.result[\"rec_event\"] || undefined;\n    if (rec_event_ret == undefined) {\n        throw \"action provided but no event recorded\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    if (!'action' in rec_event_ret){\n        throw \"No action recorded in event\";\n    }\n    var event = {};\n    for (let key of Object.keys(rec_event_ret['action'])){\n        event[key] = rec_event_ret['action'][key];\n    }\n    event_seq.push(event);\n    if ('process' in rec_event_ret){\n        var event = {};\n        for (let key of Object.keys(rec_event_ret['process'])){\n            event[key] = rec_event_ret['process'][key];\n        }\n        event_seq.push(event);\n    }\n    flow.set(\"event_seq\", event_seq);\n    node.log(\"event added\");\n    updates += 1;\n}\n\nif (updates != 1) {\n    throw \"Incorrect number of updates performed: \" + updates;\n}\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":930,"y":280,"wires":[["19fe852f898001fa","b4df4e3448eecb7f"]]},{"id":"c760274deeefb3cb","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 6","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":520,"y":340,"wires":[]},{"id":"6dee989894181e09","type":"function","z":"29dcfb15ba1e5f55","name":"UnqueueMsg","func":"// Send message from the queue\nlet queue = flow.get(\"eventQueue\") || [];\n\nif (queue.length > 0) {\n    let next = queue.shift();\n    flow.set(\"eventQueue\", queue);\n    // Reset the payload since we are looping\n    msg.payload = {};\n    for (let field of Object.keys(next)) {\n        if (field == 'url'){\n            // This is the endpoint to contact\n            msg.url = next[field];\n        }else if (typeof(next[field]) == \"object\" && 'var_name' in next[field]){\n            // This is the variable and optional label that we need to retrieve\n            // from the flow environment\n            var flowvar = flow.get(next[field]['var_name'])\n            if ('var_label' in next[field]){\n                // Only the particular subfield to be used\n                msg.payload[field] = flowvar[next[field]['var_label']];\n            }else{\n                // All variable to be used\n                msg.payload[field] = flowvar;\n            }\n        }else{\n            // Static scalar value\n            msg.payload[field] = next[field];\n        }\n    }\n    return [msg,null];  // send next message\n} else {\n    node.status({fill:\"green\", shape:\"dot\", text:\"All messages sent\"});\n    return [null,{}];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":520,"y":380,"wires":[["7e737a7ef9984132","c760274deeefb3cb"],["a66652e23c1e09a1"]]},{"id":"ab272028a560c209","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 7","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":720,"y":340,"wires":[]},{"id":"7e737a7ef9984132","type":"http request","z":"29dcfb15ba1e5f55","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[{"keyType":"other","keyValue":"content-type","valueType":"other","valueValue":"application/json"}],"x":730,"y":380,"wires":[["84775b8c3757aad2","ab272028a560c209"]]},{"id":"ed34ec72bb6e8db4","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 8","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":900,"y":340,"wires":[]},{"id":"84775b8c3757aad2","type":"function","z":"29dcfb15ba1e5f55","name":"CopyResults","func":"\nconst user_ret = msg.payload.result.user || {};\nconst user_data_ret = msg.payload.result[\"user_data\"] || {};\nconst users_data_ret = msg.payload.result[\"users_data\"] || {};\nconst locs_data_ret = msg.payload.result[\"locs_data\"] || {};\nconst units_data_ret = msg.payload.result[\"units_data\"] || {};\nconst res_spec_data_ret = msg.payload.result[\"res_spec_data\"] || {};\nconst res_data_ret = msg.payload.result[\"res_data\"] || {};\nconst process_data_ret = msg.payload.result[\"process_data\"] || {};\nconst action_ret = msg.payload.result[\"action\"] || undefined;\n\nvar updates = 0;\n\nif ((Object.keys(user_data_ret).length !== 0) && (Object.keys(users_data_ret).length !== 0)) {\n    throw \"user_data and users_data returned\";\n}\nif (Object.keys(locs_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"locs_data is returned but no user is given\";\n    } else {\n        var locs_data = flow.get(\"locs_data\");\n        locs_data[user_ret] = locs_data_ret[user_ret];\n        flow.set(\"locs_data\", locs_data);\n        updates += 1;\n        node.log(\"locs_data updated\");\n    }\n}\n\nif (Object.keys(units_data_ret).length !== 0) {\n    const unit_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (unit_name_ret == undefined) {\n        throw \"units_data is returned but no unit name is given\";\n    } else {\n        var units_data = flow.get(\"units_data\");\n        units_data[unit_name_ret] = units_data_ret[unit_name_ret];\n        flow.set(\"units_data\", units_data);\n        updates += 1;\n        node.log(\"units_data updated\");\n    }\n}\nif (Object.keys(res_spec_data_ret).length !== 0) {\n    const res_spec_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (res_spec_name_ret == undefined) {\n        throw \"res_spec_data is returned but no res spec name is given\";\n    } else {\n        var res_spec_data = flow.get(\"res_spec_data\");\n        res_spec_data[res_spec_name_ret] = res_spec_data_ret[res_spec_name_ret];\n        flow.set(\"res_spec_data\", res_spec_data);\n        updates += 1;\n        node.log(\"res_spec_data updated\");\n    }\n}\nif (Object.keys(res_data_ret).length !== 0) {\n    const res_name_ret = msg.payload.result[\"res_name\"] || undefined;\n    const event_seq_ret = msg.payload.result[\"event_seq\"] || undefined;\n    if (event_seq_ret == undefined || event_seq_ret.length != 1) {\n        throw \"No or more than one event returned\" + event_seq_ret;\n    }\n\n    if (res_name_ret == undefined) {\n        throw \"res_data is returned but no res name is given\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    event_seq.push(event_seq_ret[0]);\n    flow.set(\"event_seq\", event_seq);\n\n    var res_data = flow.get(\"res_data\");\n    res_data[res_name_ret] = res_data_ret[res_name_ret];\n    flow.set(\"res_data\", res_data);\n    updates += 1;\n    node.log(\"res_data updated\");\n}\nif (Object.keys(process_data_ret).length !== 0) {\n    const process_name_ret = msg.payload.result[\"process_name\"] || undefined;\n    if (process_name_ret == undefined) {\n        throw \"process_data is returned but no process name is given\";\n    }\n    var process_data = flow.get(\"process_data\");\n    process_data[process_name_ret] = process_data_ret[process_name_ret];\n    flow.set(\"process_data\", process_data);\n    updates += 1;\n    node.log(\"process_data updated\");\n}\nif (Object.keys(user_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"user_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = user_data_ret;\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (Object.keys(users_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"users_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = users_data_ret[user_ret];\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (action_ret != undefined) {\n    const existing_res_ret = msg.payload.result[\"existing_res\"] || {};\n    const new_res_ret = msg.payload.result[\"new_res\"] || {};\n\n    if (Object.keys(existing_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[existing_res_ret['name']] = existing_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"existing res_data in event updated\");\n    }\n    if (Object.keys(new_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[new_res_ret['name']] = new_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"new res_data in event updated\");\n    }\n\n    const rec_event_ret = msg.payload.result[\"rec_event\"] || undefined;\n    if (rec_event_ret == undefined) {\n        throw \"action provided but no event recorded\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    if (!'action' in rec_event_ret){\n        throw \"No action recorded in event\";\n    }\n    var event = {};\n    for (let key of Object.keys(rec_event_ret['action'])){\n        event[key] = rec_event_ret['action'][key];\n    }\n    event_seq.push(event);\n    if ('process' in rec_event_ret){\n        var event = {};\n        for (let key of Object.keys(rec_event_ret['process'])){\n            event[key] = rec_event_ret['process'][key];\n        }\n        event_seq.push(event);\n    }\n    flow.set(\"event_seq\", event_seq);\n    node.log(\"event added\");\n    updates += 1;\n}\n\nif (updates != 1) {\n    throw \"Incorrect number of updates performed: \" + updates;\n}\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":910,"y":380,"wires":[["6dee989894181e09","ed34ec72bb6e8db4"]]},{"id":"3df789467a55f62a","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 9","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":520,"y":440,"wires":[]},{"id":"cd1126d9e7f9852f","type":"function","z":"29dcfb15ba1e5f55","name":"UnqueueMsg","func":"// Send message from the queue\nlet queue = flow.get(\"eventQueue\") || [];\n\nif (queue.length > 0) {\n    let next = queue.shift();\n    flow.set(\"eventQueue\", queue);\n    // Reset the payload since we are looping\n    msg.payload = {};\n    for (let field of Object.keys(next)) {\n        if (field == 'url'){\n            // This is the endpoint to contact\n            msg.url = next[field];\n        }else if (typeof(next[field]) == \"object\" && 'var_name' in next[field]){\n            // This is the variable and optional label that we need to retrieve\n            // from the flow environment\n            var flowvar = flow.get(next[field]['var_name'])\n            if ('var_label' in next[field]){\n                // Only the particular subfield to be used\n                msg.payload[field] = flowvar[next[field]['var_label']];\n            }else{\n                // All variable to be used\n                msg.payload[field] = flowvar;\n            }\n        }else{\n            // Static scalar value\n            msg.payload[field] = next[field];\n        }\n    }\n    return [msg,null];  // send next message\n} else {\n    node.status({fill:\"green\", shape:\"dot\", text:\"All messages sent\"});\n    return [null,{}];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":520,"y":480,"wires":[["07b558668862e0f2","3df789467a55f62a"],["74d4ae7a509ae173"]]},{"id":"130918a17a0be7f2","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 10","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":720,"y":440,"wires":[]},{"id":"07b558668862e0f2","type":"http request","z":"29dcfb15ba1e5f55","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[{"keyType":"other","keyValue":"content-type","valueType":"other","valueValue":"application/json"}],"x":730,"y":480,"wires":[["562f7c09828e6998","130918a17a0be7f2"]]},{"id":"65e44585b5917e0b","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 11","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":900,"y":440,"wires":[]},{"id":"562f7c09828e6998","type":"function","z":"29dcfb15ba1e5f55","name":"CopyResults","func":"\nconst user_ret = msg.payload.result.user || {};\nconst user_data_ret = msg.payload.result[\"user_data\"] || {};\nconst users_data_ret = msg.payload.result[\"users_data\"] || {};\nconst locs_data_ret = msg.payload.result[\"locs_data\"] || {};\nconst units_data_ret = msg.payload.result[\"units_data\"] || {};\nconst res_spec_data_ret = msg.payload.result[\"res_spec_data\"] || {};\nconst res_data_ret = msg.payload.result[\"res_data\"] || {};\nconst process_data_ret = msg.payload.result[\"process_data\"] || {};\nconst action_ret = msg.payload.result[\"action\"] || undefined;\n\nvar updates = 0;\n\nif ((Object.keys(user_data_ret).length !== 0) && (Object.keys(users_data_ret).length !== 0)) {\n    throw \"user_data and users_data returned\";\n}\nif (Object.keys(locs_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"locs_data is returned but no user is given\";\n    } else {\n        var locs_data = flow.get(\"locs_data\");\n        locs_data[user_ret] = locs_data_ret[user_ret];\n        flow.set(\"locs_data\", locs_data);\n        updates += 1;\n        node.log(\"locs_data updated\");\n    }\n}\n\nif (Object.keys(units_data_ret).length !== 0) {\n    const unit_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (unit_name_ret == undefined) {\n        throw \"units_data is returned but no unit name is given\";\n    } else {\n        var units_data = flow.get(\"units_data\");\n        units_data[unit_name_ret] = units_data_ret[unit_name_ret];\n        flow.set(\"units_data\", units_data);\n        updates += 1;\n        node.log(\"units_data updated\");\n    }\n}\nif (Object.keys(res_spec_data_ret).length !== 0) {\n    const res_spec_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (res_spec_name_ret == undefined) {\n        throw \"res_spec_data is returned but no res spec name is given\";\n    } else {\n        var res_spec_data = flow.get(\"res_spec_data\");\n        res_spec_data[res_spec_name_ret] = res_spec_data_ret[res_spec_name_ret];\n        flow.set(\"res_spec_data\", res_spec_data);\n        updates += 1;\n        node.log(\"res_spec_data updated\");\n    }\n}\nif (Object.keys(res_data_ret).length !== 0) {\n    const res_name_ret = msg.payload.result[\"res_name\"] || undefined;\n    const event_seq_ret = msg.payload.result[\"event_seq\"] || undefined;\n    if (event_seq_ret == undefined || event_seq_ret.length != 1) {\n        throw \"No or more than one event returned\" + event_seq_ret;\n    }\n\n    if (res_name_ret == undefined) {\n        throw \"res_data is returned but no res name is given\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    event_seq.push(event_seq_ret[0]);\n    flow.set(\"event_seq\", event_seq);\n\n    var res_data = flow.get(\"res_data\");\n    res_data[res_name_ret] = res_data_ret[res_name_ret];\n    flow.set(\"res_data\", res_data);\n    updates += 1;\n    node.log(\"res_data updated\");\n}\nif (Object.keys(process_data_ret).length !== 0) {\n    const process_name_ret = msg.payload.result[\"process_name\"] || undefined;\n    if (process_name_ret == undefined) {\n        throw \"process_data is returned but no process name is given\";\n    }\n    var process_data = flow.get(\"process_data\");\n    process_data[process_name_ret] = process_data_ret[process_name_ret];\n    flow.set(\"process_data\", process_data);\n    updates += 1;\n    node.log(\"process_data updated\");\n}\nif (Object.keys(user_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"user_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = user_data_ret;\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (Object.keys(users_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"users_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = users_data_ret[user_ret];\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (action_ret != undefined) {\n    const existing_res_ret = msg.payload.result[\"existing_res\"] || {};\n    const new_res_ret = msg.payload.result[\"new_res\"] || {};\n\n    if (Object.keys(existing_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[existing_res_ret['name']] = existing_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"existing res_data in event updated\");\n    }\n    if (Object.keys(new_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[new_res_ret['name']] = new_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"new res_data in event updated\");\n    }\n\n    const rec_event_ret = msg.payload.result[\"rec_event\"] || undefined;\n    if (rec_event_ret == undefined) {\n        throw \"action provided but no event recorded\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    if (!'action' in rec_event_ret){\n        throw \"No action recorded in event\";\n    }\n    var event = {};\n    for (let key of Object.keys(rec_event_ret['action'])){\n        event[key] = rec_event_ret['action'][key];\n    }\n    event_seq.push(event);\n    if ('process' in rec_event_ret){\n        var event = {};\n        for (let key of Object.keys(rec_event_ret['process'])){\n            event[key] = rec_event_ret['process'][key];\n        }\n        event_seq.push(event);\n    }\n    flow.set(\"event_seq\", event_seq);\n    node.log(\"event added\");\n    updates += 1;\n}\n\nif (updates != 1) {\n    throw \"Incorrect number of updates performed: \" + updates;\n}\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":910,"y":480,"wires":[["cd1126d9e7f9852f","65e44585b5917e0b"]]},{"id":"d569dfb0507d1ea5","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 12","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":520,"y":540,"wires":[]},{"id":"8effc2f6a0b68f53","type":"function","z":"29dcfb15ba1e5f55","name":"UnqueueMsg","func":"// Send message from the queue\nlet queue = flow.get(\"eventQueue\") || [];\n\nif (queue.length > 0) {\n    let next = queue.shift();\n    flow.set(\"eventQueue\", queue);\n    // Reset the payload since we are looping\n    msg.payload = {};\n    for (let field of Object.keys(next)) {\n        if (field == 'url'){\n            // This is the endpoint to contact\n            msg.url = next[field];\n        }else if (typeof(next[field]) == \"object\" && 'var_name' in next[field]){\n            // This is the variable and optional label that we need to retrieve\n            // from the flow environment\n            var flowvar = flow.get(next[field]['var_name'])\n            if ('var_label' in next[field]){\n                // Only the particular subfield to be used\n                msg.payload[field] = flowvar[next[field]['var_label']];\n            }else{\n                // All variable to be used\n                msg.payload[field] = flowvar;\n            }\n        }else{\n            // Static scalar value\n            msg.payload[field] = next[field];\n        }\n    }\n    return [msg,null];  // send next message\n} else {\n    node.status({fill:\"green\", shape:\"dot\", text:\"All messages sent\"});\n    return [null,{}];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":520,"y":580,"wires":[["b02d4b22cec003d2","d569dfb0507d1ea5"],["f00e3b811f3a960d"]]},{"id":"afb724129b5d7d1b","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 13","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":720,"y":540,"wires":[]},{"id":"b02d4b22cec003d2","type":"http request","z":"29dcfb15ba1e5f55","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[{"keyType":"other","keyValue":"content-type","valueType":"other","valueValue":"application/json"}],"x":730,"y":580,"wires":[["cc3bdd9cf8e74f03","afb724129b5d7d1b"]]},{"id":"c9e914f7782bdc17","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 14","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":900,"y":540,"wires":[]},{"id":"cc3bdd9cf8e74f03","type":"function","z":"29dcfb15ba1e5f55","name":"CopyResults","func":"\nconst user_ret = msg.payload.result.user || {};\nconst user_data_ret = msg.payload.result[\"user_data\"] || {};\nconst users_data_ret = msg.payload.result[\"users_data\"] || {};\nconst locs_data_ret = msg.payload.result[\"locs_data\"] || {};\nconst units_data_ret = msg.payload.result[\"units_data\"] || {};\nconst res_spec_data_ret = msg.payload.result[\"res_spec_data\"] || {};\nconst res_data_ret = msg.payload.result[\"res_data\"] || {};\nconst process_data_ret = msg.payload.result[\"process_data\"] || {};\nconst action_ret = msg.payload.result[\"action\"] || undefined;\n\nvar updates = 0;\n\nif ((Object.keys(user_data_ret).length !== 0) && (Object.keys(users_data_ret).length !== 0)) {\n    throw \"user_data and users_data returned\";\n}\nif (Object.keys(locs_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"locs_data is returned but no user is given\";\n    } else {\n        var locs_data = flow.get(\"locs_data\");\n        locs_data[user_ret] = locs_data_ret[user_ret];\n        flow.set(\"locs_data\", locs_data);\n        updates += 1;\n        node.log(\"locs_data updated\");\n    }\n}\n\nif (Object.keys(units_data_ret).length !== 0) {\n    const unit_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (unit_name_ret == undefined) {\n        throw \"units_data is returned but no unit name is given\";\n    } else {\n        var units_data = flow.get(\"units_data\");\n        units_data[unit_name_ret] = units_data_ret[unit_name_ret];\n        flow.set(\"units_data\", units_data);\n        updates += 1;\n        node.log(\"units_data updated\");\n    }\n}\nif (Object.keys(res_spec_data_ret).length !== 0) {\n    const res_spec_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (res_spec_name_ret == undefined) {\n        throw \"res_spec_data is returned but no res spec name is given\";\n    } else {\n        var res_spec_data = flow.get(\"res_spec_data\");\n        res_spec_data[res_spec_name_ret] = res_spec_data_ret[res_spec_name_ret];\n        flow.set(\"res_spec_data\", res_spec_data);\n        updates += 1;\n        node.log(\"res_spec_data updated\");\n    }\n}\nif (Object.keys(res_data_ret).length !== 0) {\n    const res_name_ret = msg.payload.result[\"res_name\"] || undefined;\n    const event_seq_ret = msg.payload.result[\"event_seq\"] || undefined;\n    if (event_seq_ret == undefined || event_seq_ret.length != 1) {\n        throw \"No or more than one event returned\" + event_seq_ret;\n    }\n\n    if (res_name_ret == undefined) {\n        throw \"res_data is returned but no res name is given\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    event_seq.push(event_seq_ret[0]);\n    flow.set(\"event_seq\", event_seq);\n\n    var res_data = flow.get(\"res_data\");\n    res_data[res_name_ret] = res_data_ret[res_name_ret];\n    flow.set(\"res_data\", res_data);\n    updates += 1;\n    node.log(\"res_data updated\");\n}\nif (Object.keys(process_data_ret).length !== 0) {\n    const process_name_ret = msg.payload.result[\"process_name\"] || undefined;\n    if (process_name_ret == undefined) {\n        throw \"process_data is returned but no process name is given\";\n    }\n    var process_data = flow.get(\"process_data\");\n    process_data[process_name_ret] = process_data_ret[process_name_ret];\n    flow.set(\"process_data\", process_data);\n    updates += 1;\n    node.log(\"process_data updated\");\n}\nif (Object.keys(user_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"user_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = user_data_ret;\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (Object.keys(users_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"users_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = users_data_ret[user_ret];\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (action_ret != undefined) {\n    const existing_res_ret = msg.payload.result[\"existing_res\"] || {};\n    const new_res_ret = msg.payload.result[\"new_res\"] || {};\n\n    if (Object.keys(existing_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[existing_res_ret['name']] = existing_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"existing res_data in event updated\");\n    }\n    if (Object.keys(new_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[new_res_ret['name']] = new_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"new res_data in event updated\");\n    }\n\n    const rec_event_ret = msg.payload.result[\"rec_event\"] || undefined;\n    if (rec_event_ret == undefined) {\n        throw \"action provided but no event recorded\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    if (!'action' in rec_event_ret){\n        throw \"No action recorded in event\";\n    }\n    var event = {};\n    for (let key of Object.keys(rec_event_ret['action'])){\n        event[key] = rec_event_ret['action'][key];\n    }\n    event_seq.push(event);\n    if ('process' in rec_event_ret){\n        var event = {};\n        for (let key of Object.keys(rec_event_ret['process'])){\n            event[key] = rec_event_ret['process'][key];\n        }\n        event_seq.push(event);\n    }\n    flow.set(\"event_seq\", event_seq);\n    node.log(\"event added\");\n    updates += 1;\n}\n\nif (updates != 1) {\n    throw \"Incorrect number of updates performed: \" + updates;\n}\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":910,"y":580,"wires":[["8effc2f6a0b68f53","c9e914f7782bdc17"]]},{"id":"9659862d848a79e2","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 15","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":520,"y":640,"wires":[]},{"id":"6a378dc92f921375","type":"function","z":"29dcfb15ba1e5f55","name":"UnqueueMsg","func":"// Send message from the queue\nlet queue = flow.get(\"eventQueue\") || [];\n\nif (queue.length > 0) {\n    let next = queue.shift();\n    flow.set(\"eventQueue\", queue);\n    // Reset the payload since we are looping\n    msg.payload = {};\n    for (let field of Object.keys(next)) {\n        if (field == 'url'){\n            // This is the endpoint to contact\n            msg.url = next[field];\n        }else if (typeof(next[field]) == \"object\" && 'var_name' in next[field]){\n            // This is the variable and optional label that we need to retrieve\n            // from the flow environment\n            var flowvar = flow.get(next[field]['var_name'])\n            if ('var_label' in next[field]){\n                // Only the particular subfield to be used\n                msg.payload[field] = flowvar[next[field]['var_label']];\n            }else{\n                // All variable to be used\n                msg.payload[field] = flowvar;\n            }\n        }else{\n            // Static scalar value\n            msg.payload[field] = next[field];\n        }\n    }\n    return [msg,null];  // send next message\n} else {\n    node.status({fill:\"green\", shape:\"dot\", text:\"All messages sent\"});\n    return [null,{}];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":520,"y":680,"wires":[["6c85cbbda3611762","9659862d848a79e2"],["7cd02e8eefd69b8d"]]},{"id":"689778a9228417e0","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 16","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":720,"y":640,"wires":[]},{"id":"6c85cbbda3611762","type":"http request","z":"29dcfb15ba1e5f55","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[{"keyType":"other","keyValue":"content-type","valueType":"other","valueValue":"application/json"}],"x":730,"y":680,"wires":[["3ec7d46fad0575fe","689778a9228417e0"]]},{"id":"cb0f17f181460911","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 17","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":900,"y":640,"wires":[]},{"id":"3ec7d46fad0575fe","type":"function","z":"29dcfb15ba1e5f55","name":"CopyResults","func":"\nconst user_ret = msg.payload.result.user || {};\nconst user_data_ret = msg.payload.result[\"user_data\"] || {};\nconst users_data_ret = msg.payload.result[\"users_data\"] || {};\nconst locs_data_ret = msg.payload.result[\"locs_data\"] || {};\nconst units_data_ret = msg.payload.result[\"units_data\"] || {};\nconst res_spec_data_ret = msg.payload.result[\"res_spec_data\"] || {};\nconst res_data_ret = msg.payload.result[\"res_data\"] || {};\nconst process_data_ret = msg.payload.result[\"process_data\"] || {};\nconst action_ret = msg.payload.result[\"action\"] || undefined;\n\nvar updates = 0;\n\nif ((Object.keys(user_data_ret).length !== 0) && (Object.keys(users_data_ret).length !== 0)) {\n    throw \"user_data and users_data returned\";\n}\nif (Object.keys(locs_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"locs_data is returned but no user is given\";\n    } else {\n        var locs_data = flow.get(\"locs_data\");\n        locs_data[user_ret] = locs_data_ret[user_ret];\n        flow.set(\"locs_data\", locs_data);\n        updates += 1;\n        node.log(\"locs_data updated\");\n    }\n}\n\nif (Object.keys(units_data_ret).length !== 0) {\n    const unit_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (unit_name_ret == undefined) {\n        throw \"units_data is returned but no unit name is given\";\n    } else {\n        var units_data = flow.get(\"units_data\");\n        units_data[unit_name_ret] = units_data_ret[unit_name_ret];\n        flow.set(\"units_data\", units_data);\n        updates += 1;\n        node.log(\"units_data updated\");\n    }\n}\nif (Object.keys(res_spec_data_ret).length !== 0) {\n    const res_spec_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (res_spec_name_ret == undefined) {\n        throw \"res_spec_data is returned but no res spec name is given\";\n    } else {\n        var res_spec_data = flow.get(\"res_spec_data\");\n        res_spec_data[res_spec_name_ret] = res_spec_data_ret[res_spec_name_ret];\n        flow.set(\"res_spec_data\", res_spec_data);\n        updates += 1;\n        node.log(\"res_spec_data updated\");\n    }\n}\nif (Object.keys(res_data_ret).length !== 0) {\n    const res_name_ret = msg.payload.result[\"res_name\"] || undefined;\n    const event_seq_ret = msg.payload.result[\"event_seq\"] || undefined;\n    if (event_seq_ret == undefined || event_seq_ret.length != 1) {\n        throw \"No or more than one event returned\" + event_seq_ret;\n    }\n\n    if (res_name_ret == undefined) {\n        throw \"res_data is returned but no res name is given\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    event_seq.push(event_seq_ret[0]);\n    flow.set(\"event_seq\", event_seq);\n\n    var res_data = flow.get(\"res_data\");\n    res_data[res_name_ret] = res_data_ret[res_name_ret];\n    flow.set(\"res_data\", res_data);\n    updates += 1;\n    node.log(\"res_data updated\");\n}\nif (Object.keys(process_data_ret).length !== 0) {\n    const process_name_ret = msg.payload.result[\"process_name\"] || undefined;\n    if (process_name_ret == undefined) {\n        throw \"process_data is returned but no process name is given\";\n    }\n    var process_data = flow.get(\"process_data\");\n    process_data[process_name_ret] = process_data_ret[process_name_ret];\n    flow.set(\"process_data\", process_data);\n    updates += 1;\n    node.log(\"process_data updated\");\n}\nif (Object.keys(user_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"user_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = user_data_ret;\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (Object.keys(users_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"users_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = users_data_ret[user_ret];\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (action_ret != undefined) {\n    const existing_res_ret = msg.payload.result[\"existing_res\"] || {};\n    const new_res_ret = msg.payload.result[\"new_res\"] || {};\n\n    if (Object.keys(existing_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[existing_res_ret['name']] = existing_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"existing res_data in event updated\");\n    }\n    if (Object.keys(new_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[new_res_ret['name']] = new_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"new res_data in event updated\");\n    }\n\n    const rec_event_ret = msg.payload.result[\"rec_event\"] || undefined;\n    if (rec_event_ret == undefined) {\n        throw \"action provided but no event recorded\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    if (!'action' in rec_event_ret){\n        throw \"No action recorded in event\";\n    }\n    var event = {};\n    for (let key of Object.keys(rec_event_ret['action'])){\n        event[key] = rec_event_ret['action'][key];\n    }\n    event_seq.push(event);\n    if ('process' in rec_event_ret){\n        var event = {};\n        for (let key of Object.keys(rec_event_ret['process'])){\n            event[key] = rec_event_ret['process'][key];\n        }\n        event_seq.push(event);\n    }\n    flow.set(\"event_seq\", event_seq);\n    node.log(\"event added\");\n    updates += 1;\n}\n\nif (updates != 1) {\n    throw \"Incorrect number of updates performed: \" + updates;\n}\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":910,"y":680,"wires":[["6a378dc92f921375","cb0f17f181460911"]]},{"id":"c6e618cdf181698b","type":"function","z":"29dcfb15ba1e5f55","name":"SetUnits","func":"const units_def = [\n    {\n        \"name\": \"piece\",\n        \"label\": \"u_piece\",\n        \"symbol\": \"om2:one\"\n    },\n    {\n        \"name\": \"mass\",\n        \"label\": \"kg\",\n        \"symbol\": \"om2:kilogram\"\n    },\n    {\n        \"name\": \"volume\",\n        \"label\": \"lt\",\n        \"symbol\": \"om2:litre\"\n    },\n    {\n        \"name\": \"time\",\n        \"label\": \"h\",\n        \"symbol\": \"om2:hour\"\n    }\n]\n\nflow.set(\"units_def\", units_def);\n\nvar units_data = {}\nflow.set(\"units_data\", units_data);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":640,"y":80,"wires":[["92fa6b95f16084a0"]]},{"id":"e31b26fbd5e39d2d","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 18","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":540,"y":740,"wires":[]},{"id":"40c9d2d14d3d78db","type":"function","z":"29dcfb15ba1e5f55","name":"UnqueueMsg","func":"// Send message from the queue\nlet queue = flow.get(\"eventQueue\") || [];\n\nif (queue.length > 0) {\n    let next = queue.shift();\n    flow.set(\"eventQueue\", queue);\n    // Reset the payload since we are looping\n    msg.payload = {};\n    for (let field of Object.keys(next)) {\n        if (field == 'url'){\n            // This is the endpoint to contact\n            msg.url = next[field];\n        }else if (typeof(next[field]) == \"object\" && 'var_name' in next[field]){\n            // This is the variable and optional label that we need to retrieve\n            // from the flow environment\n            var flowvar = flow.get(next[field]['var_name'])\n            if ('var_label' in next[field]){\n                // Only the particular subfield to be used\n                if( Array.isArray(next[field]['var_label'])){\n                    for (let label of next[field]['var_label']) {\n                        flowvar = flowvar[label];\n                    }\n                    msg.payload[field] = flowvar;\n                }else{\n                    msg.payload[field] = flowvar[next[field]['var_label']];\n                }\n                \n            }else{\n                // All variable to be used\n                msg.payload[field] = flowvar;\n            }\n        }else{\n            // Static scalar value\n            msg.payload[field] = next[field];\n        }\n    }\n    return [msg,null];  // send next message\n} else {\n    node.status({fill:\"green\", shape:\"dot\", text:\"All messages sent\"});\n    return [null,{}];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":540,"y":780,"wires":[["c85ca3f30dd08c0d","e31b26fbd5e39d2d"],["a6a44cfaba4315fd"]]},{"id":"77d5bbb1b2b386dd","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 19","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":740,"y":740,"wires":[]},{"id":"c85ca3f30dd08c0d","type":"http request","z":"29dcfb15ba1e5f55","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[{"keyType":"other","keyValue":"content-type","valueType":"other","valueValue":"application/json"}],"x":750,"y":780,"wires":[["3a767ad3d9b95111","77d5bbb1b2b386dd"]]},{"id":"6b25c56fede7dc7e","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 20","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":920,"y":740,"wires":[]},{"id":"3a767ad3d9b95111","type":"function","z":"29dcfb15ba1e5f55","name":"CopyResults","func":"\nconst user_ret = msg.payload.result.user || {};\nconst user_data_ret = msg.payload.result[\"user_data\"] || {};\nconst users_data_ret = msg.payload.result[\"users_data\"] || {};\nconst locs_data_ret = msg.payload.result[\"locs_data\"] || {};\nconst units_data_ret = msg.payload.result[\"units_data\"] || {};\nconst res_spec_data_ret = msg.payload.result[\"res_spec_data\"] || {};\nconst res_data_ret = msg.payload.result[\"res_data\"] || {};\nconst process_data_ret = msg.payload.result[\"process_data\"] || {};\nconst action_ret = msg.payload.result[\"action\"] || undefined;\n\nvar updates = 0;\n\nif ((Object.keys(user_data_ret).length !== 0) && (Object.keys(users_data_ret).length !== 0)) {\n    throw \"user_data and users_data returned\";\n}\nif (Object.keys(locs_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"locs_data is returned but no user is given\";\n    } else {\n        var locs_data = flow.get(\"locs_data\");\n        locs_data[user_ret] = locs_data_ret[user_ret];\n        flow.set(\"locs_data\", locs_data);\n        updates += 1;\n        node.log(\"locs_data updated\");\n    }\n}\n\nif (Object.keys(units_data_ret).length !== 0) {\n    const unit_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (unit_name_ret == undefined) {\n        throw \"units_data is returned but no unit name is given\";\n    } else {\n        var units_data = flow.get(\"units_data\");\n        units_data[unit_name_ret] = units_data_ret[unit_name_ret];\n        flow.set(\"units_data\", units_data);\n        updates += 1;\n        node.log(\"units_data updated\");\n    }\n}\nif (Object.keys(res_spec_data_ret).length !== 0) {\n    const res_spec_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (res_spec_name_ret == undefined) {\n        throw \"res_spec_data is returned but no res spec name is given\";\n    } else {\n        var res_spec_data = flow.get(\"res_spec_data\");\n        res_spec_data[res_spec_name_ret] = res_spec_data_ret[res_spec_name_ret];\n        flow.set(\"res_spec_data\", res_spec_data);\n        updates += 1;\n        node.log(\"res_spec_data updated\");\n    }\n}\nif (Object.keys(res_data_ret).length !== 0) {\n    const res_name_ret = msg.payload.result[\"res_name\"] || undefined;\n    const event_seq_ret = msg.payload.result[\"event_seq\"] || undefined;\n    if (event_seq_ret == undefined || event_seq_ret.length != 1) {\n        throw \"No or more than one event returned\" + event_seq_ret;\n    }\n\n    if (res_name_ret == undefined) {\n        throw \"res_data is returned but no res name is given\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    event_seq.push(event_seq_ret[0]);\n    flow.set(\"event_seq\", event_seq);\n\n    var res_data = flow.get(\"res_data\");\n    res_data[res_name_ret] = res_data_ret[res_name_ret];\n    flow.set(\"res_data\", res_data);\n    updates += 1;\n    node.log(\"res_data updated\");\n}\nif (Object.keys(process_data_ret).length !== 0) {\n    const process_name_ret = msg.payload.result[\"process_name\"] || undefined;\n    if (process_name_ret == undefined) {\n        throw \"process_data is returned but no process name is given\";\n    }\n    var process_data = flow.get(\"process_data\");\n    process_data[process_name_ret] = process_data_ret[process_name_ret];\n    flow.set(\"process_data\", process_data);\n    updates += 1;\n    node.log(\"process_data updated\");\n}\nif (Object.keys(user_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"user_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = user_data_ret;\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (Object.keys(users_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"users_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = users_data_ret[user_ret];\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (action_ret != undefined) {\n    const existing_res_ret = msg.payload.result[\"existing_res\"] || {};\n    const new_res_ret = msg.payload.result[\"new_res\"] || {};\n\n    if (Object.keys(existing_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[existing_res_ret['name']] = existing_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"existing res_data in event updated\");\n    }\n    if (Object.keys(new_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[new_res_ret['name']] = new_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"new res_data in event updated\");\n    }\n\n    const rec_event_ret = msg.payload.result[\"rec_event\"] || undefined;\n    if (rec_event_ret == undefined) {\n        throw \"action provided but no event recorded\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    if (!'action' in rec_event_ret){\n        throw \"No action recorded in event\";\n    }\n    var event = {};\n    for (let key of Object.keys(rec_event_ret['action'])){\n        event[key] = rec_event_ret['action'][key];\n    }\n    event_seq.push(event);\n    if ('process' in rec_event_ret){\n        var event = {};\n        for (let key of Object.keys(rec_event_ret['process'])){\n            event[key] = rec_event_ret['process'][key];\n        }\n        event_seq.push(event);\n    }\n    flow.set(\"event_seq\", event_seq);\n    node.log(\"event added\");\n    updates += 1;\n}\n\nif (updates != 1) {\n    throw \"Incorrect number of updates performed: \" + updates;\n}\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":930,"y":780,"wires":[["40c9d2d14d3d78db","6b25c56fede7dc7e"]]},{"id":"92fa6b95f16084a0","type":"function","z":"29dcfb15ba1e5f55","name":"SetResources","func":"var res_specs_def = {\n    'soap': {\n        'note': 'Specification for soap to be used to wash the gowns',\n        'classification': 'https://www.wikidata.org/wiki/Q34396',\n        'default_unit_id': {\n            'var_name': 'units_data',\n            'var_label': ['mass','id']\n        }\n    },\n    'water': {\n        'note': 'Specification for water to be used to wash the gowns',\n        'classification': 'https://www.wikidata.org/wiki/Q283',\n        'default_unit_id': {\n            'var_name': 'units_data',\n            'var_label': ['volume','id']\n        }\n    },\n    'cotton': {\n        'note': 'Specification for cotton to be used to sew the gowns',\n        'classification': 'https://www.wikidata.org/wiki/Q11457',\n        'default_unit_id': {\n            'var_name': 'units_data',\n            'var_label': ['mass','id']\n        }\n    },\n    'gown': {\n        'note': 'Specification for gowns',\n        'classification': 'https://www.wikidata.org/wiki/Q89990310',\n        'default_unit_id': {\n            'var_name': 'units_data',\n            'var_label': ['piece','id']\n        }\n    },\n    'surgical_operation': {\n        'note': 'Specification for surgical operations',\n        'classification': 'https://www.wikidata.org/wiki/Q600236',\n        'default_unit_id': {\n            'var_name': 'units_data',\n            'var_label': ['time','id']\n        }\n    }\n\n};\n\nflow.set(\"res_specs_def\", res_specs_def);\n\nvar resources_def = {\n    'soap': {\n        'owner': 'B',\n        'amount': 100\n        },\n    'water': {\n        'owner': 'B',\n        'amount': 50\n        },\n    'cotton': {\n        'owner': 'B',\n        'amount': 20\n        },\n};\n\nflow.set(\"resources_def\", resources_def);\n\nvar res_spec_data = {}\nvar res_data = {};\n\nflow.set(\"res_spec_data\", res_spec_data);\nflow.set(\"res_data\", res_data);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":800,"y":80,"wires":[["9cdb88d8b6083439"]]},{"id":"b36e599f502352d9","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 22","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":540,"y":840,"wires":[]},{"id":"52f125f87e8af152","type":"function","z":"29dcfb15ba1e5f55","name":"UnqueueMsg","func":"// Send message from the queue\nlet queue = flow.get(\"eventQueue\") || [];\n\nif (queue.length > 0) {\n    let next = queue.shift();\n    flow.set(\"eventQueue\", queue);\n    // Reset the payload since we are looping\n    msg.payload = {};\n    for (let field of Object.keys(next)) {\n        if (field == 'url'){\n            // This is the endpoint to contact\n            msg.url = next[field];\n        }else if (typeof(next[field]) == \"object\" && 'var_name' in next[field]){\n            // This is the variable and optional label that we need to retrieve\n            // from the flow environment\n            var flowvar = flow.get(next[field]['var_name'])\n            if ('var_label' in next[field]){\n                // Only the particular subfield to be used\n                if( Array.isArray(next[field]['var_label'])){\n                    for (let label of next[field]['var_label']) {\n                        flowvar = flowvar[label];\n                    }\n                    msg.payload[field] = flowvar;\n                }else{\n                    msg.payload[field] = flowvar[next[field]['var_label']];\n                }\n                \n            }else{\n                // All variable to be used\n                msg.payload[field] = flowvar;\n            }\n        }else{\n            // Static scalar value\n            msg.payload[field] = next[field];\n        }\n    }\n    return [msg,null];  // send next message\n} else {\n    node.status({fill:\"green\", shape:\"dot\", text:\"All messages sent\"});\n    return [null,{}];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":540,"y":880,"wires":[["7ba7f581578588df","b36e599f502352d9"],[]]},{"id":"3ef7fb0b16e43e06","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 23","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":740,"y":840,"wires":[]},{"id":"7ba7f581578588df","type":"http request","z":"29dcfb15ba1e5f55","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[{"keyType":"other","keyValue":"content-type","valueType":"other","valueValue":"application/json"}],"x":750,"y":880,"wires":[["0c68cda990620363","3ef7fb0b16e43e06"]]},{"id":"ef666e380ae3dafa","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 24","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":920,"y":840,"wires":[]},{"id":"0c68cda990620363","type":"function","z":"29dcfb15ba1e5f55","name":"CopyResults","func":"\nconst user_ret = msg.payload.result.user || {};\nconst user_data_ret = msg.payload.result[\"user_data\"] || {};\nconst users_data_ret = msg.payload.result[\"users_data\"] || {};\nconst locs_data_ret = msg.payload.result[\"locs_data\"] || {};\nconst units_data_ret = msg.payload.result[\"units_data\"] || {};\nconst res_spec_data_ret = msg.payload.result[\"res_spec_data\"] || {};\nconst res_data_ret = msg.payload.result[\"res_data\"] || {};\nconst process_data_ret = msg.payload.result[\"process_data\"] || {};\nconst action_ret = msg.payload.result[\"action\"] || undefined;\n\nvar updates = 0;\n\nif ((Object.keys(user_data_ret).length !== 0) && (Object.keys(users_data_ret).length !== 0)) {\n    throw \"user_data and users_data returned\";\n}\nif (Object.keys(locs_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"locs_data is returned but no user is given\";\n    } else {\n        var locs_data = flow.get(\"locs_data\");\n        locs_data[user_ret] = locs_data_ret[user_ret];\n        flow.set(\"locs_data\", locs_data);\n        updates += 1;\n        node.log(\"locs_data updated\");\n    }\n}\n\nif (Object.keys(units_data_ret).length !== 0) {\n    const unit_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (unit_name_ret == undefined) {\n        throw \"units_data is returned but no unit name is given\";\n    } else {\n        var units_data = flow.get(\"units_data\");\n        units_data[unit_name_ret] = units_data_ret[unit_name_ret];\n        flow.set(\"units_data\", units_data);\n        updates += 1;\n        node.log(\"units_data updated\");\n    }\n}\nif (Object.keys(res_spec_data_ret).length !== 0) {\n    const res_spec_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (res_spec_name_ret == undefined) {\n        throw \"res_spec_data is returned but no res spec name is given\";\n    } else {\n        var res_spec_data = flow.get(\"res_spec_data\");\n        res_spec_data[res_spec_name_ret] = res_spec_data_ret[res_spec_name_ret];\n        flow.set(\"res_spec_data\", res_spec_data);\n        updates += 1;\n        node.log(\"res_spec_data updated\");\n    }\n}\nif (Object.keys(res_data_ret).length !== 0) {\n    const res_name_ret = msg.payload.result[\"res_name\"] || undefined;\n    const event_seq_ret = msg.payload.result[\"event_seq\"] || undefined;\n    if (event_seq_ret == undefined || event_seq_ret.length != 1) {\n        throw \"No or more than one event returned\" + event_seq_ret;\n    }\n\n    if (res_name_ret == undefined) {\n        throw \"res_data is returned but no res name is given\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    event_seq.push(event_seq_ret[0]);\n    flow.set(\"event_seq\", event_seq);\n\n    var res_data = flow.get(\"res_data\");\n    res_data[res_name_ret] = res_data_ret[res_name_ret];\n    flow.set(\"res_data\", res_data);\n    updates += 1;\n    node.log(\"res_data updated\");\n}\nif (Object.keys(process_data_ret).length !== 0) {\n    const process_name_ret = msg.payload.result[\"process_name\"] || undefined;\n    if (process_name_ret == undefined) {\n        throw \"process_data is returned but no process name is given\";\n    }\n    var process_data = flow.get(\"process_data\");\n    process_data[process_name_ret] = process_data_ret[process_name_ret];\n    flow.set(\"process_data\", process_data);\n    updates += 1;\n    node.log(\"process_data updated\");\n}\nif (Object.keys(user_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"user_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = user_data_ret;\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (Object.keys(users_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"users_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = users_data_ret[user_ret];\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (action_ret != undefined) {\n    const existing_res_ret = msg.payload.result[\"existing_res\"] || {};\n    const new_res_ret = msg.payload.result[\"new_res\"] || {};\n\n    if (Object.keys(existing_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[existing_res_ret['name']] = existing_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"existing res_data in event updated\");\n    }\n    if (Object.keys(new_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[new_res_ret['name']] = new_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"new res_data in event updated\");\n    }\n\n    const rec_event_ret = msg.payload.result[\"rec_event\"] || undefined;\n    if (rec_event_ret == undefined) {\n        throw \"action provided but no event recorded\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    if (!'action' in rec_event_ret){\n        throw \"No action recorded in event\";\n    }\n    var event = {};\n    for (let key of Object.keys(rec_event_ret['action'])){\n        event[key] = rec_event_ret['action'][key];\n    }\n    event_seq.push(event);\n    if ('process' in rec_event_ret){\n        var event = {};\n        for (let key of Object.keys(rec_event_ret['process'])){\n            event[key] = rec_event_ret['process'][key];\n        }\n        event_seq.push(event);\n    }\n    flow.set(\"event_seq\", event_seq);\n    node.log(\"event added\");\n    updates += 1;\n}\n\nif (updates != 1) {\n    throw \"Incorrect number of updates performed: \" + updates;\n}\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":930,"y":880,"wires":[["52f125f87e8af152","ef666e380ae3dafa"]]},{"id":"9cdb88d8b6083439","type":"function","z":"29dcfb15ba1e5f55","name":"SetProcs","func":"var processes_def = {\n    'Sew_gown': {\n        'user' : 'A',\n        'note': \"Sew gown process performed by \"\n    },\n    'Use_gown': {\n        'user': 'A',\n        'note': \"Use gown process performed by \"\n    },\n    'Clean_gown': {\n        'user': 'B',\n        'note': \"Clean gown process performed by \"\n    }\n};\n\nflow.set('processes_def', processes_def);\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":960,"y":80,"wires":[["5b2f17ac3a241915"]]},{"id":"cf725a444c144f21","type":"function","z":"29dcfb15ba1e5f55","name":"UnqueueMsg","func":"// Send message from the queue\nlet queue = flow.get(\"eventQueue\") || [];\n\nif (queue.length > 0) {\n    let next = queue.shift();\n    flow.set(\"eventQueue\", queue);\n    // Reset the payload since we are looping\n    msg.payload = {};\n    for (let field of Object.keys(next)) {\n        if (field == 'url'){\n            // This is the endpoint to contact\n            msg.url = next[field];\n        }else if (typeof(next[field]) == \"object\" && 'var_name' in next[field]){\n            // This is the variable and optional label that we need to retrieve\n            // from the flow environment\n            var flowvar = flow.get(next[field]['var_name'])\n            if ('var_label' in next[field]){\n                // Only the particular subfield to be used\n                if( Array.isArray(next[field]['var_label'])){\n                    for (let label of next[field]['var_label']) {\n                        flowvar = flowvar[label];\n                    }\n                    msg.payload[field] = flowvar;\n                }else{\n                    msg.payload[field] = flowvar[next[field]['var_label']];\n                }\n                \n            }else{\n                // All variable to be used\n                msg.payload[field] = flowvar;\n            }\n        }else{\n            // Static scalar value\n            msg.payload[field] = next[field];\n        }\n    }\n    return [msg,null];  // send next message\n} else {\n    node.status({fill:\"green\", shape:\"dot\", text:\"All messages sent\"});\n    return [null,{}];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":540,"y":980,"wires":[["cd80afbcc9819ace","38ddbe5f58a79c3f"],[]]},{"id":"38ddbe5f58a79c3f","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 21","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":540,"y":940,"wires":[]},{"id":"841904a9d7ebe70a","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 22","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":740,"y":940,"wires":[]},{"id":"cd80afbcc9819ace","type":"http request","z":"29dcfb15ba1e5f55","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[{"keyType":"other","keyValue":"content-type","valueType":"other","valueValue":"application/json"}],"x":750,"y":980,"wires":[["9b3f82f7da2c4a5f","841904a9d7ebe70a"]]},{"id":"f32dda96e9b6f42a","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 23","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":920,"y":940,"wires":[]},{"id":"9b3f82f7da2c4a5f","type":"function","z":"29dcfb15ba1e5f55","name":"CopyResults","func":"\nconst user_ret = msg.payload.result.user || {};\nconst user_data_ret = msg.payload.result[\"user_data\"] || {};\nconst users_data_ret = msg.payload.result[\"users_data\"] || {};\nconst locs_data_ret = msg.payload.result[\"locs_data\"] || {};\nconst units_data_ret = msg.payload.result[\"units_data\"] || {};\nconst res_spec_data_ret = msg.payload.result[\"res_spec_data\"] || {};\nconst res_data_ret = msg.payload.result[\"res_data\"] || {};\nconst process_data_ret = msg.payload.result[\"process_data\"] || {};\nconst action_ret = msg.payload.result[\"action\"] || undefined;\n\nvar updates = 0;\n\nif ((Object.keys(user_data_ret).length !== 0) && (Object.keys(users_data_ret).length !== 0)) {\n    throw \"user_data and users_data returned\";\n}\nif (Object.keys(locs_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"locs_data is returned but no user is given\";\n    } else {\n        var locs_data = flow.get(\"locs_data\");\n        locs_data[user_ret] = locs_data_ret[user_ret];\n        flow.set(\"locs_data\", locs_data);\n        updates += 1;\n        node.log(\"locs_data updated\");\n    }\n}\n\nif (Object.keys(units_data_ret).length !== 0) {\n    const unit_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (unit_name_ret == undefined) {\n        throw \"units_data is returned but no unit name is given\";\n    } else {\n        var units_data = flow.get(\"units_data\");\n        units_data[unit_name_ret] = units_data_ret[unit_name_ret];\n        flow.set(\"units_data\", units_data);\n        updates += 1;\n        node.log(\"units_data updated\");\n    }\n}\nif (Object.keys(res_spec_data_ret).length !== 0) {\n    const res_spec_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (res_spec_name_ret == undefined) {\n        throw \"res_spec_data is returned but no res spec name is given\";\n    } else {\n        var res_spec_data = flow.get(\"res_spec_data\");\n        res_spec_data[res_spec_name_ret] = res_spec_data_ret[res_spec_name_ret];\n        flow.set(\"res_spec_data\", res_spec_data);\n        updates += 1;\n        node.log(\"res_spec_data updated\");\n    }\n}\nif (Object.keys(res_data_ret).length !== 0) {\n    const res_name_ret = msg.payload.result[\"res_name\"] || undefined;\n    const event_seq_ret = msg.payload.result[\"event_seq\"] || undefined;\n    if (event_seq_ret == undefined || event_seq_ret.length != 1) {\n        throw \"No or more than one event returned\" + event_seq_ret;\n    }\n\n    if (res_name_ret == undefined) {\n        throw \"res_data is returned but no res name is given\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    event_seq.push(event_seq_ret[0]);\n    flow.set(\"event_seq\", event_seq);\n\n    var res_data = flow.get(\"res_data\");\n    res_data[res_name_ret] = res_data_ret[res_name_ret];\n    flow.set(\"res_data\", res_data);\n    updates += 1;\n    node.log(\"res_data updated\");\n}\nif (Object.keys(process_data_ret).length !== 0) {\n    const process_name_ret = msg.payload.result[\"process_name\"] || undefined;\n    if (process_name_ret == undefined) {\n        throw \"process_data is returned but no process name is given\";\n    }\n    var process_data = flow.get(\"process_data\");\n    process_data[process_name_ret] = process_data_ret[process_name_ret];\n    flow.set(\"process_data\", process_data);\n    updates += 1;\n    node.log(\"process_data updated\");\n}\nif (Object.keys(user_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"user_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = user_data_ret;\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (Object.keys(users_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"users_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = users_data_ret[user_ret];\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (action_ret != undefined) {\n    const existing_res_ret = msg.payload.result[\"existing_res\"] || {};\n    const new_res_ret = msg.payload.result[\"new_res\"] || {};\n\n    if (Object.keys(existing_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[existing_res_ret['name']] = existing_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"existing res_data in event updated\");\n    }\n    if (Object.keys(new_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[new_res_ret['name']] = new_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"new res_data in event updated\");\n    }\n\n    const rec_event_ret = msg.payload.result[\"rec_event\"] || undefined;\n    if (rec_event_ret == undefined) {\n        throw \"action provided but no event recorded\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    if (!'action' in rec_event_ret){\n        throw \"No action recorded in event\";\n    }\n    var event = {};\n    for (let key of Object.keys(rec_event_ret['action'])){\n        event[key] = rec_event_ret['action'][key];\n    }\n    event_seq.push(event);\n    if ('process' in rec_event_ret){\n        var event = {};\n        for (let key of Object.keys(rec_event_ret['process'])){\n            event[key] = rec_event_ret['process'][key];\n        }\n        event_seq.push(event);\n    }\n    flow.set(\"event_seq\", event_seq);\n    node.log(\"event added\");\n    updates += 1;\n}\n\nif (updates != 1) {\n    throw \"Incorrect number of updates performed: \" + updates;\n}\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":930,"y":980,"wires":[["cf725a444c144f21","f32dda96e9b6f42a"]]},{"id":"b8ae532af67098ed","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 5","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":540,"y":1060,"wires":[]},{"id":"40096929cc67b7ca","type":"function","z":"29dcfb15ba1e5f55","name":"UnqueueMsg","func":"// Send message from the queue\nlet queue = flow.get(\"eventQueue\") || [];\n\nif (queue.length > 0) {\n    let next = queue.shift();\n    flow.set(\"eventQueue\", queue);\n    // Reset the payload since we are looping\n    msg.payload = {};\n    for (let field of Object.keys(next)) {\n        if (field == 'url'){\n            // This is the endpoint to contact\n            msg.url = next[field];\n        }else if (typeof(next[field]) == \"object\" && 'var_name' in next[field]){\n            // This is the variable and optional label that we need to retrieve\n            // from the flow environment\n            var flowvar = flow.get(next[field]['var_name'])\n            if ('var_label' in next[field]){\n                // Only the particular subfield to be used\n                if( Array.isArray(next[field]['var_label'])){\n                    for (let label of next[field]['var_label']) {\n                        flowvar = flowvar[label];\n                    }\n                    msg.payload[field] = flowvar;\n                }else{\n                    msg.payload[field] = flowvar[next[field]['var_label']];\n                }\n                \n            }else{\n                // All variable to be used\n                msg.payload[field] = flowvar;\n            }\n        }else{\n            // Static scalar value\n            msg.payload[field] = next[field];\n        }\n    }\n    return [msg,null];  // send next message\n} else {\n    node.status({fill:\"green\", shape:\"dot\", text:\"All messages sent\"});\n    return [null,{}];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":540,"y":1100,"wires":[["c1ca1580521c074f","b8ae532af67098ed"],[]]},{"id":"854e8b1f4d6973f6","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 6","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":740,"y":1060,"wires":[]},{"id":"c1ca1580521c074f","type":"http request","z":"29dcfb15ba1e5f55","name":"","method":"use","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[{"keyType":"other","keyValue":"content-type","valueType":"other","valueValue":"application/json"}],"x":750,"y":1100,"wires":[["8dacce46bc3ca0d9","854e8b1f4d6973f6"]]},{"id":"160caa59661f98e9","type":"debug","z":"29dcfb15ba1e5f55","name":"debug 7","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":920,"y":1060,"wires":[]},{"id":"8dacce46bc3ca0d9","type":"function","z":"29dcfb15ba1e5f55","name":"CopyResults","func":"\nconst user_ret = msg.payload.result.user || {};\nconst user_data_ret = msg.payload.result[\"user_data\"] || {};\nconst users_data_ret = msg.payload.result[\"users_data\"] || {};\nconst locs_data_ret = msg.payload.result[\"locs_data\"] || {};\nconst units_data_ret = msg.payload.result[\"units_data\"] || {};\nconst res_spec_data_ret = msg.payload.result[\"res_spec_data\"] || {};\nconst res_data_ret = msg.payload.result[\"res_data\"] || {};\nconst process_data_ret = msg.payload.result[\"process_data\"] || {};\nconst action_ret = msg.payload.result[\"action\"] || undefined;\n\nvar updates = 0;\n\nif ((Object.keys(user_data_ret).length !== 0) && (Object.keys(users_data_ret).length !== 0)) {\n    throw \"user_data and users_data returned\";\n}\nif (Object.keys(locs_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"locs_data is returned but no user is given\";\n    } else {\n        var locs_data = flow.get(\"locs_data\");\n        locs_data[user_ret] = locs_data_ret[user_ret];\n        flow.set(\"locs_data\", locs_data);\n        updates += 1;\n        node.log(\"locs_data updated\");\n    }\n}\n\nif (Object.keys(units_data_ret).length !== 0) {\n    const unit_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (unit_name_ret == undefined) {\n        throw \"units_data is returned but no unit name is given\";\n    } else {\n        var units_data = flow.get(\"units_data\");\n        units_data[unit_name_ret] = units_data_ret[unit_name_ret];\n        flow.set(\"units_data\", units_data);\n        updates += 1;\n        node.log(\"units_data updated\");\n    }\n}\nif (Object.keys(res_spec_data_ret).length !== 0) {\n    const res_spec_name_ret = msg.payload.result[\"name\"] || undefined;\n    if (res_spec_name_ret == undefined) {\n        throw \"res_spec_data is returned but no res spec name is given\";\n    } else {\n        var res_spec_data = flow.get(\"res_spec_data\");\n        res_spec_data[res_spec_name_ret] = res_spec_data_ret[res_spec_name_ret];\n        flow.set(\"res_spec_data\", res_spec_data);\n        updates += 1;\n        node.log(\"res_spec_data updated\");\n    }\n}\nif (Object.keys(res_data_ret).length !== 0) {\n    const res_name_ret = msg.payload.result[\"res_name\"] || undefined;\n    const event_seq_ret = msg.payload.result[\"event_seq\"] || undefined;\n    if (event_seq_ret == undefined || event_seq_ret.length != 1) {\n        throw \"No or more than one event returned\" + event_seq_ret;\n    }\n\n    if (res_name_ret == undefined) {\n        throw \"res_data is returned but no res name is given\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    event_seq.push(event_seq_ret[0]);\n    flow.set(\"event_seq\", event_seq);\n\n    var res_data = flow.get(\"res_data\");\n    res_data[res_name_ret] = res_data_ret[res_name_ret];\n    flow.set(\"res_data\", res_data);\n    updates += 1;\n    node.log(\"res_data updated\");\n}\nif (Object.keys(process_data_ret).length !== 0) {\n    const process_name_ret = msg.payload.result[\"process_name\"] || undefined;\n    if (process_name_ret == undefined) {\n        throw \"process_data is returned but no process name is given\";\n    }\n    var process_data = flow.get(\"process_data\");\n    process_data[process_name_ret] = process_data_ret[process_name_ret];\n    flow.set(\"process_data\", process_data);\n    updates += 1;\n    node.log(\"process_data updated\");\n}\nif (Object.keys(user_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"user_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = user_data_ret;\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (Object.keys(users_data_ret).length !== 0) {\n    if (user_ret == undefined) {\n        throw \"users_data is returned but no user is given\";\n    } else {\n        var users_data = flow.get(\"users_data\");\n        users_data[user_ret] = users_data_ret[user_ret];\n        flow.set(\"users_data\", users_data);\n        updates += 1;\n        node.log(\"users_data updated\");\n    }\n}\nif (action_ret != undefined) {\n    const existing_res_ret = msg.payload.result[\"existing_res\"] || {};\n    const new_res_ret = msg.payload.result[\"new_res\"] || {};\n\n    if (Object.keys(existing_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[existing_res_ret['name']] = existing_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"existing res_data in event updated\");\n    }\n    if (Object.keys(new_res_ret).length !== 0) {\n        var res_data = flow.get(\"res_data\");\n        res_data[new_res_ret['name']] = new_res_ret;\n        flow.set(\"res_data\", res_data);\n        node.log(\"new res_data in event updated\");\n    }\n\n    const rec_event_ret = msg.payload.result[\"rec_event\"] || undefined;\n    if (rec_event_ret == undefined) {\n        throw \"action provided but no event recorded\";\n    }\n    var event_seq = flow.get(\"event_seq\");\n    if (!'action' in rec_event_ret){\n        throw \"No action recorded in event\";\n    }\n    var event = {};\n    for (let key of Object.keys(rec_event_ret['action'])){\n        event[key] = rec_event_ret['action'][key];\n    }\n    event_seq.push(event);\n    if ('process' in rec_event_ret){\n        var event = {};\n        for (let key of Object.keys(rec_event_ret['process'])){\n            event[key] = rec_event_ret['process'][key];\n        }\n        event_seq.push(event);\n    }\n    flow.set(\"event_seq\", event_seq);\n    node.log(\"event added\");\n    updates += 1;\n}\n\nif (updates != 1) {\n    throw \"Incorrect number of updates performed: \" + updates;\n}\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":930,"y":1100,"wires":[["40096929cc67b7ca","160caa59661f98e9"]]}]